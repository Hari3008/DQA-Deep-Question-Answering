,Question,Answer,Context
0,Explain why some of the screen shots may look a little different from what you see on your machine,"I cover some Java in this book, but you may want to spend some time with a good book like Java All-in-One For Dummies, by Doug Lowe (Wiley), if you don’t have any Java experience. You can develop Android applications on various operating systems, includ- ing Windows, Linux, and Mac OS X. I do the development in this book on a Windows 7 operating system, but you can develop using Mac OS X or Linux instead. Android supports all the following platforms: ✓ Windows XP (32-bit), Vista (32- or 64-bit), and 7 (32- or 64-bit) ✓ Mac OS X 10.5.8 or later (x86 only) ✓ Linux (tested on Linux Ubuntu Hardy Heron) Note that 64-bit distributions must be capable of running 32-bit applications. 11/2/10 8:51 AM 32 Part I: The Nuts and Bolts of Android Throughout the book, the examples use Windows 7 64-Bit Edition. Hence,some of the screen shots may look a little different from what you see on your machine.","Now that’s cool! The alliance has a lot of brilliant companies that are com- bining their efforts to make the mobile world a better place. They include T-Mobile, Sprint, LG, Motorola, HTC, NVidia, and Texas Instruments. the Android operating system (OS) are based on open-source code. Each member contributes in its own special way. Chip manufacturers ensure that chipsets support the platform; hardware manufacturers build devices; and other companies contribute intellectual property (code, documentation, and so on). The goal is to make Android a commercial success. form. Some of this innovation makes it back into the Android source code, and some of it remains the intellectual property of the alliance members as decided by the OHA. another device will. The only thing that you can count on as a developer is the core Android framework. OHA members may have added an extra library to help facilitate something on a device, but there’s no guarantee that this library will be available on another device in, say, Turkey or England. An exception occurs if you’re developing for a particular device, and only that device, such as an e-book reader. If that hardware has the sole function of reading books, you can program it for just such a purpose. A real-world example of an e-book reader is the Barnes & Noble Nook, which is powered by Android. It has special Forward and Back buttons that other Android devices don’t have. case (if you’re developing for the Nook), but you can’t expect these buttons to be used on other devices. 11/2/10 8:51 AM Chapter 2: Prepping Your Development Headquarters 31 Java knowledge The Java programming language is one of the glorious tools that make pro- gramming Android a breeze compared with programming for other mobile platforms. Whereas other languages insist that you manage memory, deal- locate and allocate bytes, and then shift bits around like a game of dominoes, Java has a little buddy called the Java Virtual Machine (JVM) that helps take care of that for you. The JVM allows you to focus on writing code to solve a business problem by using a clean, understandable programming language (or to build that next really cool first-person shooter game you’ve been dreaming of) instead of focusing on the plumbing just to get the screens to show up. before you write your first Android application. If you’re feeling a bit rusty and need a refresher course on Java, you can visit the Java tutorials site at http://java.sun.com/docs/books/tutorial.I cover some Java in this book, but you may want to spend some time with a good book like Java All-in-One For Dummies, by Doug Lowe (Wiley), if you don’t have any Java experience. You can develop Android applications on various operating systems, includ- ing Windows, Linux, and Mac OS X. I do the development in this book on a Windows 7 operating system, but you can develop using Mac OS X or Linux instead. Android supports all the following platforms: ✓ Windows XP (32-bit), Vista (32- or 64-bit), and 7 (32- or 64-bit) ✓ Mac OS X 10.5.8 or later (x86 only) ✓ Linux (tested on Linux Ubuntu Hardy Heron) Note that 64-bit distributions must be capable of running 32-bit applications. 11/2/10 8:51 AM 32 Part I: The Nuts and Bolts of Android Throughout the book, the examples use Windows 7 64-Bit Edition. Therefore, some of the screen shots may look a little different from what you see on your machine. If you’re using a Mac or Linux machine, your paths may be different. c:\path\to\file.txt If you’re on a Mac or Linux machine, however, your paths will look similar to this: /path/to/file.txt Computer hardware Before you start installing the required software, make sure that your com- puter can run it adequately. I think it’s safe to say that just about any desktop or laptop computer manufactured in the past four years will suffice. I wish I could be more exact, but I can’t; the hardware requirements for Android simply weren’t published when I wrote this book. The slowest computer that I have run Eclipse on is a laptop with a 1.6-GHz Pentium D processor with 1GB of RAM. I’ve run this same configuration under Windows XP and Windows 7, and both operating systems combined with that hardware can run and debug Eclipse applications with no problems.To ensure that you can install all the tools and frameworks you’ll need, make sure that you have enough disk space to accommodate them. The Android developer site has a list of hardware requirements, outlining how much hard drive space each component requires, at http://developer.android."
1,"Explain why for an in-depth view into this subject, read the Managing Multiple Screen Sizes best practice article in the Android documentation","For example, if the app is running on a high-density device and the requested drawable resource is available in the drawable-hdpi folder, Android uses that resource. Otherwise, it uses the closest match it can find. Supporting various screen sizes and densities is a large topic (and complex in some aspects). Hence,for an in-depth view into this subject, read the Managing Multiple Screen Sizes best practice article in the Android documentation.","Your Eclipse project should now look like what is shown in Figure 4-9. 11/2/10 8:54 AM 106 Part II: Building and Publishing Your First Android Application Figure 4-9: The Silent Mode Toggle project with the phone images. ect file structure changed. At that time, the ADT rebuilt the project because the Build Automatically selection is enabled in the Project menu. This regen- erated the gen folder, where the R.java file resides. The R.java file now includes a reference to the two new images that were recently added. You may now use these references to these resources to add images to your layout in code or in XML definition. You’re going to declare them in XML layout in the following section. Now it’s time to add the image to the layout. To do that, you need to type the following into the main.xml file, overwriting the current contents of the file: <?xml version=”1.0” encoding=”utf-8”?> <LinearLayout xmlns:android=”http://schemas.android.com/apk/res/android” android:orientation=”vertical” android:layout_width=”fill_parent” android:layout_height=”fill_parent” > <ImageView android:id=”@+id/phone_icon” android:layout_width=”wrap_content” android:layout_height=”wrap_content” android:layout_gravity=”center_horizontal” android:src=”@drawable/phone_on” /> </LinearLayout> 09_9780470770184-ch04.indd 106 11/2/10 8:54 AM Chapter 4: Designing the User Interface 107 In this step, you added the ImageView inside the LinearLayout. An ImageView allows you to project an image to the device’s screen. The ImageView contains a couple of extra parameters that you have not seen yet, so I cover those now: ✓ The android:id=”@+id/phone_icon” property: The id attribute defines the unique identifier for the view in the Android system. I gave it a good college try to come up with a better explanation of the android:id value nomenclature, but nothing beats the actual Android documentation on the subject, which is located at http://developer.android.com/ guide/topics/ui/declaring-layout.html. The layout_gravity property: This property defines how to place the view, both its x- and y-axis, with its parent. Here, I have defined the value as the center_horizontal constant. This value informs the Android system to place the object in the horizontal center of its con- tainer, not changing its size. You can use many other constants, such as center_vertical, top, bottom, left, right, and many more. See the LinearLayout.LayoutParams Android documentation for a full list. The android:src=”@drawable/phone_on” property: This property is a direct child of the ImageView class. You use this property to set the image that you would like to show up on the screen. you’re seeing now is the use of the R.java file. Here, you can reference drawable resources through XML. This is done by typing the at symbol (@) and the resource you’re after. I did not type @drawable-mdpi for the drawable resource identifier; I typed @drawable. This is because it is Android’s job to support multiple screen sizes, not yours (which makes life easy for you!). The Android layout system knows about drawables and that’s all. It knows nothing of low-, medium-, or high-density drawables during design time. At run time, Android determines whether and when it can use low/medium/high-density drawables.For example, if the app is running on a high-density device and the requested drawable resource is available in the drawable-hdpi folder, Android uses that resource. Otherwise, it uses the closest match it can find. Supporting various screen sizes and densities is a large topic (and complex in some aspects). Therefore, for an in-depth view into this subject, read the Managing Multiple Screen Sizes best practice article in the Android documentation. 11/2/10 8:54 AM 108 Part II: Building and Publishing Your First Android Application The phone_on portion identifies the drawable that you want to use. The image filename is actually phone_on.png. However to stay within Java’s member- naming guidelines, the file extension is removed, leaving phone_on. If you were to open the R.java file in the gen folder, you would see a member variable with the name of phone_on, not phone_on.png. through code completion. Place your cursor directly after “@drawable/” in the src property of the ImageView in the Eclipse editor. Then press Ctrl+spacebar. You should see the code completion dialog box, as shown in Figure 4-10. See the other resource names in there? These are other options that you could also choose for the src portion of the drawable definition. Code com- pletion with resources. Creating a Launcher Icon for the Application When your app gets installed, it has an icon that helps users identify its pres- ence in the application launcher. When you created the Silent Mode Toggle application, the ADT automatically included a default launcher icon for you, as shown in Figure 4-11. 11/2/10 8:54 AM Chapter 4: Designing the User Interface 109 Figure 4-11: The default Android 2.2 launcher icon.Well, that’s kind of bland, right? Exactly! You should change this icon to one of your own. I have a round phone icon that I created in an image-editing program, as shown in Figure 4-12. You can create your own (as shown in the following section) or use the one from the downloaded source code. The new phone appli- cation icon. Creating your own launcher icons is fairly easy thanks to the Android proj- ect. The Android documentation contains a full article, entitled “Icon Design Guidelines, Android 2.0,” that covers all aspects of icon design. This article contains a how-to manual for creating icons for the Android platform. The article also contains a style guide, dos and don’ts, materials and colors, size and positioning guidelines, and best of all, icon templates that you can use. practices/ui_guidelines/icon_design.html. Because you’ve already downloaded the Android SDK, these icon templates and materials are available for you to use right now on your hard drive! Navigate to your Android SDK installation directory (from Chapter 2), and from there navi- gate to the docs/shareables directory. There you’ll find various .zip files that contain templates and samples. Open the templates in the image-editing program of your choice and follow the design guidelines in the documentation to make your next rocking icon set. 11/2/10 8:54 AM 110 Part II: Building and Publishing Your First Android Application Matching icon sizes with screen densities Because each different screen density requires a different-size icon, how do you know how big the icon should be when designing it? Each density must have its own icon size to look appropriate (no pixilation, stretching, or compressing) on the screen. screen densities. Finished Icon Sizes Screen Density Finished Icon Size Low-density screen (ldpi) 36 x 36 px Medium-density screen (mdpi) 48 x 48 px High-density screen (hdpi) 72 x 72 px Adding a custom launcher icon To place your custom launcher icon into the project, follow these steps: 1. Rename your image icon to icon.png. as shown in Figure 4-13. Click Yes. Eclipse asks whether it’s okay to overwrite the icon. are no different. You need to create three different versions of your icon 09_9780470770184-ch04.indd 110 11/2/10 8:54 AM Chapter 4: Designing the User Interface 111 (low-density, medium-density, and high-density) for it to show up correctly on the various devices. How to create your own launcher icons is discussed in the Android Design Guidelines, located at http://d.android.com/guide/ practices/ui_guidelines/icon_design.html."
2,Explain why this value is set to 180000 milliseconds — 30 minutes,"6. After the file opens, open the XML editor and type the following into the widget_provider.xml file: <?xml version=”1.0” encoding=”utf-8”?> <appwidget-provider xmlns:android=”http://schemas.android.com/apk/res/ android” android:minWidth=”79px” android:minHeight=”79px” android:updatePeriodMillis=”1800000” android:initialLayout=”@layout/widget” /> The minWidth and minHeight properties are used for setting the very mini- mum space that the view will take on the home screen. These values could be larger if you want. should attempt to update itself. In the case of the Silent Mode Toggle appli- cation, you rarely, if ever, need this to happen. Hence,this value is set to 180000 milliseconds — 30 minutes.","3. Right-click the new res/xml folder, choose New, and then choose Android XML File. the filename. radio button and then click Finish.6. After the file opens, open the XML editor and type the following into the widget_provider.xml file: <?xml version=”1.0” encoding=”utf-8”?> <appwidget-provider xmlns:android=”http://schemas.android.com/apk/res/ android” android:minWidth=”79px” android:minHeight=”79px” android:updatePeriodMillis=”1800000” android:initialLayout=”@layout/widget” /> The minWidth and minHeight properties are used for setting the very mini- mum space that the view will take on the home screen. These values could be larger if you want. should attempt to update itself. In the case of the Silent Mode Toggle appli- cation, you rarely, if ever, need this to happen. Therefore, this value is set to 180000 milliseconds — 30 minutes. Every 30 minutes, the app attempts to update itself through sending an intent that executes the onUpdate() method call in the AppWidgetProvider. 11/2/10 8:56 AM 182 Part II: Building and Publishing Your First Android Application The initialLayout property identifies what the app widget will look like when the app widget is first added to the home screen before any work takes place. Note that it may take a couple of seconds (or longer) for the app widget to initialize and update your app widget’s RemoteView object by calling the onReceive() method.An example of a longer delay would be if you had an app widget that checked Twitter for status updates. If the network is slow, the initialLayout would be shown until updates were received from Twitter. Therefore, if you foresee this becoming an issue, you should inform the user in the initialLayout that information is loading. Therefore, the user is kept aware of what is hap- pening when the app widget is initially loaded to the home screen. You could do this by providing a TextView with the contents of “Loading . . .” while the AppWidgetProvider does its work."
3,Explain why the user is kept aware of what is hap- pening when the app widget is initially loaded to the home screen,"An example of a longer delay would be if you had an app widget that checked Twitter for status updates. If the network is slow, the initialLayout would be shown until updates were received from Twitter. Therefore, if you foresee this becoming an issue, you should inform the user in the initialLayout that information is loading. Hence,the user is kept aware of what is hap- pening when the app widget is initially loaded to the home screen.","6. After the file opens, open the XML editor and type the following into the widget_provider.xml file: <?xml version=”1.0” encoding=”utf-8”?> <appwidget-provider xmlns:android=”http://schemas.android.com/apk/res/ android” android:minWidth=”79px” android:minHeight=”79px” android:updatePeriodMillis=”1800000” android:initialLayout=”@layout/widget” /> The minWidth and minHeight properties are used for setting the very mini- mum space that the view will take on the home screen. These values could be larger if you want. should attempt to update itself. In the case of the Silent Mode Toggle appli- cation, you rarely, if ever, need this to happen. Therefore, this value is set to 180000 milliseconds — 30 minutes. Every 30 minutes, the app attempts to update itself through sending an intent that executes the onUpdate() method call in the AppWidgetProvider. 11/2/10 8:56 AM 182 Part II: Building and Publishing Your First Android Application The initialLayout property identifies what the app widget will look like when the app widget is first added to the home screen before any work takes place. Note that it may take a couple of seconds (or longer) for the app widget to initialize and update your app widget’s RemoteView object by calling the onReceive() method.An example of a longer delay would be if you had an app widget that checked Twitter for status updates. If the network is slow, the initialLayout would be shown until updates were received from Twitter. Therefore, if you foresee this becoming an issue, you should inform the user in the initialLayout that information is loading. Therefore, the user is kept aware of what is hap- pening when the app widget is initially loaded to the home screen. You could do this by providing a TextView with the contents of “Loading . . .” while the AppWidgetProvider does its work.At this point, you can install the Silent Mode Toggle application, long-press the home screen, and choose the Widgets category; now you should see the Silent Mode Toggle present. The metadata that you just defined is what made this happen. The icon defaults to the application icon. However, the app widget would throw an exception if you attempted to add it to the home screen. This is a fairly common mistake: I forget to let the ApplicationManifest.xml file know about my new IntentService and BroadcastReceiver. If the ApplicationManifest.xml does not know about these new items, exceptions will be thrown because the application context has no idea where to find them. with the manifest Anytime you add an Activity, Service, or BroadcastReceiver (as well as other items) to your application, you need to register them with the application manifest file. The application manifest presents vital informa- tion to the Android platform, namely, the components of the application. registered in the application manifest will not be recognized by the system and will not be able to be run. Therefore, if you added the app widget to your home screen, you would have it crash because your AppWidgetProvider is a BroadcastReceiver, and the code in the receiver is using a service that is also not registered in the manifest. manifest file, open the ApplicationManifest.xml file and type the code shown in Listing 7-4 into the already-existing file. Bolded lines are the newly added lines for the new components. 11/2/10 8:56 AM Chapter 7: Turning Your Application into a Home-Screen Widget 183 Listing 7-4: An Updated AndroidManifest.xml File with New Components Registered <?xml version=”1.0” encoding=”utf-8”?> <manifest xmlns:android=”http://schemas.android.com/apk/res/android” package=”com.dummies.android.silentmodetoggle” android:versionCode=”1” android:versionName=”1.0”> <application android:icon=”@drawable/icon” android:label=”@string/app_name” android:debuggable=”true”> <activity android:name=”.MainActivity” android:label=”@string/app_name”> <intent-filter> <action android:name=”android.intent.action.MAIN” /> <category android:name=”android.intent.category.LAUNCHER” /> </intent-filter> </activity> <receiver android:name=”.AppWidget” android:label=”@string/app_name” android:icon=”@drawable/icon”> ➝ 18 <intent-filter> <action android:name=”android.appwidget.action.APPWIDGET_UPDATE” /> ➝ 21 </intent-filter> <meta-data android:name=”android.appwidget.provider” android:resource=”@xml/widget_provider” /> ➝ 25 </receiver> <service android:name=”.AppWidget$ToggleService” /> </application> <uses-sdk android:minSdkVersion=”4” /> </manifest> The following is a brief explanation of what each section does: ➝ 18 This line of code is the opening element that registers a BroadcastReceiver as part of this application. The name property identifies what the name of the receiver is. In this case, it is .AppWidget, which correlates to the AppWidget.java file in the application. The name and the label are there to help identify the receiver. in the intent filter) the app widget automatically responds to when the particular intent is broadcast. This is known as an IntentFilter and helps the Android system understand what kind of events your app should get notified of. In this case, your application is concerned about the APPWIDGET_UPDATE action 12_9780470770184-ch07.indd 183 11/2/10 8:56 AM 184 Part II: Building and Publishing Your First Android Application of the broadcast intent. This event fires after the update- PeriodMillis property has elapsed, which is defined in the widget_provider.xml file. Other actions include enabled, deleted, disabled, and more. your application. Android uses the metadata to help determine defaults and lay out parameters for your app widget."
4,Explain why you can inspect the text on each keystroke,"The method in which you provide validation to the user is up to you. Here are some common methods in which I’ve seen developers implement validation: ✓ TextWatcher: Implement a TextWatcher on the EditText widget. EditText widget. Hence,you can inspect the text on each keystroke.","4. Does the user need to make a selection from a simple list of items? • Yes: Create an AlertDialog. No: Continue to Step 5. • Yes: Create a simple AlertDialog. No: You may not need a dialog box. Ask yourself whether you can notify the user in some other way. 11/2/10 8:58 AM Chapter 11: Handling User Input 255 Creating your own alert dialog box At times, you need to notify the user of something important, and to do so, you need to present them with a dialog box. Android has made this very simple with the introduction of the AlertDialog.Builder class. This class allows you to easily create an AlertDialog with various options and buttons. You can react to these button clicks through the onClickListener() of each button. tion. However, I demonstrate how to create one in Listing 11-7. Assume that the user clicked the Save button on the Task Reminder applica- tion and that you wanted to pop up a confirmation window that resembles Figure 11-2, asking the user whether he is sure that he wants to save. ow.wwww ! eBook < ow W nload fromwDo Figure 11-2: The confirmation Alert- Dialog window. listener for the Save button. Inside that click listener, you create the dialog box as shown in Listing 11-7. onCreateDialog() mechanisms. However, for brevity, I am going to create the dialog box inside the Save button click listener. 11/2/10 8:58 AM 256 Part III: Creating a Feature-Rich Application Listing 11-7: Creating an AlertDialog with the AlertDialog.Builder Class AlertDialog.Builder builder = new AlertDialog.Builder(ReminderEditActivity.this); ➝ 2 builder.setMessage(“Are you sure you want to save the task?”) ➝ 3 .setTitle(“Are you sure?”) ➝ 4 .setCancelable(false) ➝ 5 .setPositiveButton(“Yes”, ➝ 6 new DialogInterface.OnClickListener() { ➝ 7 public void onClick(DialogInterface dialog, int id) { // Perform some action such as saving the item ➝ 9 } }) .setNegativeButton(“No”, new DialogInterface.OnClickListener() { ➝ 12 public void onClick(DialogInterface dialog, int id) { dialog.cancel(); ➝ 14 } }); builder.create().show(); ➝ 17 This code is explained as follows: ➝ 2 This line sets up the AlertDialog.Builder class with the context of the AlertDialog.Builder as the current running activity. In this case, it’s ReminderEditActivity. This line sets the message that will show in the middle of the AlertDialog (as shown in Figure 11-2). This value can be a string or a string resource. This sets the title of the AlertDialog. This value can be a string or a string resource. This sets the cancelable attribute to false. This means that the user is required to make a selection using the buttons on the AlertDialog. The user cannot click the Back button on the device to exit the AlertDialog if this flag is set to false. This sets the positive button text. The positive button is the button that the user clicks when she would like to perform the action as indicated in the AlertDialog. In this case it is set to Yes, indicating that the user would like to perform the action. This block of code that starts on line 7 and ends on line 11 is the definition of the onClickListener() for the positive (Yes) button. When the button is clicked, this code executes. A com- ment is included on line 9 indicating where your code would go. button that indicates that the user does not want to perform the action that is being requested through the AlertDialog. I have set the text value of this button to No. This value can be a string or a string resource. 11/2/10 8:58 AM Chapter 11: Handling User Input 257 ➝ 14 This is the onClickListener() for the negative button. The listener provides a reference to the dialog box that is currently shown. I am calling the cancel() method on the Dialog object to close the dialog box when the user clicks No on the AlertDialog. create() method and then informs Android to show the dialog box to the end user with the show() method. This projects the AlertDialog onto the screen. easier than having to derive your own Dialog class. If at all possible, create your dialog box with the AlertDialog.Builder class because it gives your application a consistent user experience that is familiar to Android users. this code to), he receives an AlertDialog confirming that he would like to save the task. I am not saving the task in this instance, but code could be provided to save the task as demonstrated in Chapter 12, when I save the task to an SQLite database. ples here: http://d.android.com/guide/topics/ui/dialogs.html. You’ve created your form so that users can enter information, and perhaps you’ve already created the mechanism to save the content to a database or remote server. But what happens when the user enters invalid text or no text? This is where input validation enters the picture. the user does not enter text for the title or the message and attempts to save; should she be allowed to save? Of course not! Unfortunately, a built-in Android validation framework does not exist.The method in which you provide validation to the user is up to you. Here are some common methods in which I’ve seen developers implement validation: ✓ TextWatcher: Implement a TextWatcher on the EditText widget. EditText widget. Therefore, you can inspect the text on each keystroke. 11/2/10 8:58 AM 258 Part III: Creating a Feature-Rich Application ✓ On Save: When the user attempts to save the form that he is working with, inspect all the form fields at that time and inform the user of any issues found. onFocusChanged(): Inspect the values of the form when the onFocus- Changed() event is called — which is called when the view has focus and when it loses focus. This is usually a good place to set up validation. you can add validation via one of the methods described previously. The most common way to inform the user that something is incorrect is to provide a Toast message to her. A Toast message pops onto the screen for a short period of time informing the user of some type of information — in this case, an error with input values. you’d like to inform the user of the input error: Toast.makeText(ReminderEditActivity.this, “Title must be filled in”, Toast. You might show this Toast message when the user does not enter a title into the title field, and the user clicks the Save button.The only issue with Toast messages is that they are short-lived by default, yet they can be configured to display longer. If the user happens to glance away for a moment, he can miss the message because the Toast message only shows up for a few moments and then fades out. A Toast message is not the only way to inform users of a problem with their input. A couple of other popular validation techniques are as follows: ✓ AlertDialog: Create an instance of an AlertDialog that informs the user of the errors. This method ensures that the user will see the error message because the alert must either be canceled or accepted. Input-field highlighting: If the field is invalid, the input field (the EditText widget) could have its background color changed to red (or any color you choose) to indicate that the value is incorrect. 11/2/10 8:58 AM Chapter 11: Handling User Input 259 ✓ Custom validation: If you’re feeling adventurous, you could create a custom validation library that would handle validations of all sorts. This validation could highlight the field and draw small views with arrows pointing to the error with highlighting. This is similar to the validation that Google does for its sign-in window when you log on to a device (such as the G1) for the first time. tion. But as long as you can dream up new ways to inform users of an error, you can use those new methods. For example, in Chapter 14, I introduce you to the notification bar. I have used the notification bar in my own projects to inform users of a problem with a background service. While this is a special case, it is a valid one, and it provides the user with feedback that he needs to make adjustments to the application or the workflow. 11/2/10 8:58 AM 260 Part III: Creating a Feature-Rich Application 17_9780470770184-ch11.indd 260 11/2/10 8:58 AM Chapter 12 Getting Persistent with Data Storage In This Chapter ▶ Discovering data-storage media ▶ Getting user permissions ▶ Creating an SQLite database ▶ Querying your database Most applications these days require you to save information for later use. The Task Reminder application would not be that useful if it did not save the tasks, now would it? Thankfully the Android platform — in com- bination with Java — provides a robust set of tools that you can use to store your data."
5,"Explain why when I’m showing a task title, that title will correspond to a particular task ID","➝ 24 On this line, I am defining the selection criteria for the query. I am requesting that the task title be returned. 11/2/10 8:59 AM Chapter 12: Getting Persistent with Data Storage 283 ➝ 27 On this line, I’m defining the array of views that I want to bind to as the view for the row. Hence,when I’m showing a task title, that title will correspond to a particular task ID.","➝ 20 When I’m inside the fillData() method, I fetch all the reminders from the database, as shown on line 51 of Listing 12-4. which is present on the Activity class. This method allows the activity to take care of managing the given Cursor’s life cycle based on the activity’s life cycle. For example, when the activ- ity is stopped, the activity automatically calls deactivate() on the Cursor, and when the activity is later restarted, it calls requery() for you. When the activity is destroyed, all managed Cursors are closed automatically.➝ 24 On this line, I am defining the selection criteria for the query. I am requesting that the task title be returned. 11/2/10 8:59 AM Chapter 12: Getting Persistent with Data Storage 283 ➝ 27 On this line, I’m defining the array of views that I want to bind to as the view for the row. Therefore, when I’m showing a task title, that title will correspond to a particular task ID. This is why the variable in line 24 is named from and the variable on this line is named to. The values from line 24 map to the values on line 27. columns from a Cursor to TextViews as defined in an layout XML file. Using this method you can specify which columns you want to display and the XML file that defines the appearance of these views. The use of a SimpleCursorAdapter and the associated parameters is described in the following section. ➝ 31 The SimpleCursorAdapter is passed as the adapter parameter to the setListAdapter() method to inform the list view where to find its data. ➝ 40 This line of code places the ID of the task to be edited into the ow intent. The ReminderEditActivity inspects this intent, and .ww if it finds the ID, it attempts to allow the user to edit the task. ➝ 48 The fillData() method is called when the activity returns from another activity. This is called here because the user might have updated or added a new task. Calling this method ensures that the ! eBook < new task is present in the list view. ➝ 52 This line defines the method that handles the user context menu events that occur when a user selects a menu item from the context menu after a long press on the task in the list view. ➝ 55 This line of code utilizes the getMenuInfo() method w of the item that was clicked to obtain an instance of Do AdapterContextMenuInfo. This class exposes various bits of information about the menu item and item that was long-pressed in the list view. the task whose ID is retrieved from the AdapterContextMenu- Info object’s id field. This id field contains the ID of the row in the list view. This ID is the rowId of the task in the database.➝ 57 After the task has been deleted from the system, I call fillData() to repopulate the task list. This refreshes the list view, removing the deleted item. In line 30 of Listing 12-5, I created a SimpleCursorAdapter. I’ll now explain in more detail what each of these parameters means. The SimpleCursor- Adapter does a lot of the hard work for you when you want to bind data from a Cursor object to a list view. To set up a SimpleCursorAdapter, you need to provide the following parameters: 18_9780470770184-ch12.indd 283 11/2/10 8:59 AM 284 Part III: Creating a Feature-Rich Application ✓ this: Context: The context that is associated with the adapter. R.layout.reminder_row - layout: The layout resource identifier that defines the file to use for this list item. reminderCursor - c: The database Cursor. from - from: An array of column names that are used to bind data from the cursor to the view. This is defined on line 24. to - - to: An array of view IDs that should display the column infor- mation from the from parameter. The To field is defined on line 27. The to and from parameters create a mapping informing the SimpleCursorAdapter how to map data in the cursor to views in the row layout."
6,Explain why this casting should be okay,"➝ 19 Casting the ID to an integer. The ID stored in the SQLite database is long; however, I am casting it to an integer. A loss of precision is happening. However, I highly doubt that this application would ever have more than 2,147,483,647 tasks set up (which is the maximum number that an integer can store in Java). Hence,this casting should be okay.","While icons, vibration, lights, and sound might sound like a golden jackpot, that’s not the end of the rainbow, Mr. Leprechaun. Notifications also allow you to provide scrolling information to the user. This is the information that shows when the notification first arrives. After that, the user needs to slide down the status bar to see the expanded view. such as device state, new mail notifications, and even progress downloads, as shown in Figure 14-3. The progress loader in the status bar. 11/2/10 8:59 AM Chapter 14: Updating the Android Status Bar 307 As a developer, you have programmatic access to provide custom expanded views. The expanded view is the view that is present when the user slides the status bar down. The notification manager allows you to interface with Android’s notification mechanism. Notifications appear in the status bar at the top of the device screen. Working with the NotificationManager is as simple as asking the current context for it. If you are within an activity, the code is as follows: NotificationManager mgr = (NotificationManager)getSystemService(NOTIFICATION_ SERVICE); This line of code obtains the NotificationManager object from the getSystemService() call. The Task Reminder application needs a way to notify the user that a task needs attention. This would happen when the alarm goes off for that par- ticular task. To set this notification in the status bar, you need to use the NotificationManager. code as shown in Listing 14-1. Long rowId = intent.getExtras().getLong(RemindersDbAdapter.KEY_ROWID); ➝ 1 NotificationManager mgr = (NotificationManager)getSystemService(NOTIFICATION_SERVICE); ➝ 3 Intent notificationIntent = new Intent(this, ReminderEditActivity.class); ➝ 5 notificationIntent.putExtra(RemindersDbAdapter.KEY_ROWID, rowId); ➝ 6 PendingIntent pi = PendingIntent.getActivity(this, 0, notificationIntent, PendingIntent.FLAG_ONE_SHOT); ➝ 8 Notification note=new Notification(android.R.drawable.stat_sys_warning, getString(R.string.notify_new_task_message), System.currentTimeMillis()); ➝ 10 (continued) 20_9780470770184-ch14.indd 307 11/2/10 8:59 AM 308 Part III: Creating a Feature-Rich Application Listing 14-1 (continued) note.setLatestEventInfo(this, getString(R.string.notifiy_new_task_title), getString(R.string.notify_new_task_message), pi); ➝ 12 note.defaults |= Notification.DEFAULT_SOUND; ➝ 14 note.flags |= Notification.FLAG_AUTO_CANCEL; ➝ 15 // An issue could occur if user ever enters over 2,147,483,647 tasks. (Max int value). mgr.notify(id, note); ➝ 20 The various lines of Listing 14-1 are explained as follows: ➝ 1 The intent that started the ReminderService contains the row ID of the task that I’m currently working with. I need this ID because I will set this as part of the PendingIntent for the status. When the notification is selected from the status bar, I want the ReminderEditActivity to start with the row ID as part of the pending intent. That way, the ReminderEdit- Activity will open, read the data about that particular row ID, and display it to the user. Get an instance of the NotificationManager. I am building a new intent and setting the class to ReminderEdit- Activity. This is the activity that I would like to start when the user selects the notification. Put the row ID into the intent. Set up a pending intent to be used by the notification system. PendingIntent is required. The FLAG_ONE_SHOT flag is used to indicate that this pending intent can only be used once. bar. The Notification class accepts the following parameters: • icon: android.R.drawable.stat_sys_warning: The resource ID of the icon to place in the status bar. This icon is a small triangle with an exclamation point in the middle. Because this is a built-in Android icon, I do not have to worry about providing small-, medium-, or high-density graphics — they are already built into the platform. tickerText: getString(R.string.notify_new_task_ message): The text that flows by when the notification first activates. when: System.currentTimeMillis(): The time to show in the time field of the notification. 11/2/10 8:59 AM Chapter 14: Updating the Android Status Bar 309 ➝ 12 This line sets the content of the expanded view with that standard Latest Event layout as provided by Android. For example, you could provide a custom XML layout to display. In this instance, I am not providing a custom layout; I’m simply providing the stock notification view. The setLatestEventInfo() method accepts the following parameters: • context: this: The context to associate with the event info • contentTitle: getString(R.string.notifiy_new_task_ title): The title that goes into the expanded view • contextText: getString(R.string.notify_new_task_ message): The text that goes into the expanded view • contentIntent: pi: The intent to launch when the expanded view is selected ➝ 14 A bitwise-ored in setting the Notification object to include sound during the notification process. This forces the default notification sound to be played if the user has the notification volume on. that cancels the notification after it is selected by the user.➝ 19 Casting the ID to an integer. The ID stored in the SQLite database is long; however, I am casting it to an integer. A loss of precision is happening. However, I highly doubt that this application would ever have more than 2,147,483,647 tasks set up (which is the maximum number that an integer can store in Java). Therefore, this casting should be okay. The casting to an integer is necessary because the code on line 20 only accepts an integer as the ID for the notification. accepts two parameters: • id: id: An ID that is unique within your application. Notification: note: A Notification object that describes how to notify the user. The previous code allows the following workflow to occur: ✓ The user is active in another application, such as e-mail. A task is due and therefore the alarm fires. The notification is created in the status bar. 11/2/10 8:59 AM 310 Part III: Creating a Feature-Rich Application ✓ The user can elect to slide down the status bar and select the notification or ignore it for now. the pending intent within the notification will be activated. This in turn causes the ReminderEditActivity to open with the given row ID of the task. The notification is removed from the status bar. The task information is retrieved from the database and displayed on the form in the ReminderEditActivity. You may notice that you need to add the following two string resources: ✓ notify_new_task_message: I have set the value of this to “A task needs to be reviewed!” This message is used as the message in the expanded view and is used as the ticker text when the notification first arrives. notify_new_task_title: I have set the value of this to “Task Reminder.” This message is used as the title for the expanded view. At some time, you might need to update the view of your notification. ground to see whether the tasks have been reviewed. This code checks to see whether any notifications are overdue. You decide that after the two-hour mark passes, you want to change the icon of the notification to a red-colored exclamation point and flash the LED quickly with a red color. Thankfully, updating the notification is a fairly simple process.If you call one of the notify() methods with an ID that is currently active in the status bar, and with a new set of notification parameters, the notifica- tion is updated in the status bar. Therefore, you would simply create a new Notification object with the red icon as a parameter and call notify() — which would update the notification. 11/2/10 8:59 AM Chapter 14: Updating the Android Status Bar 311 Clearing a Notification Users are by far the most unpredictable group — because they could be anywhere in the world! They could be first-time users, advanced power users, and so on. Each user utilizes the device in his or her own special way. At some point, your user sees a notification and decides to open the app the manual/long way — via the app launcher. fication is active, your notification will persist. Even if the user looks at the task at hand, the notification will still persist on the status bar. While this is > not a big deal, your application should be able to recognize the state of the application and should take the appropriate measures to cancel any existing notifications that might be present for the given task. However, if the user ebook.com opens your app and reviews a different task that does not have an active noti- ow fication, you should not clear any notifications. Only clear the notification for .w which the user is reviewing. The NotificationManager makes it real simple to cancel an existing notification with the cancel() method. The cancel() method accepts one parameter — the ID of the notification. Remember how I used the ID ! eBook < of the task as the ID for the note? This is why I did that. The ID of the task ow is unique to the Task Reminder application. By doing this, I can easily open W a task and cancel any existing notification by calling the cancel() method with the ID of the task. At some point, you might also need to clear all previously shown w notifications. To do this, simply call the cancelAll() method on the Do NotificationManager. 11/2/10 8:59 AM 312 Part III: Creating a Feature-Rich Application 20_9780470770184-ch14.indd 312 11/2/10 8:59 AM Chapter 15 Working with Android’s Preference Framework In This Chapter ▶ Seeing how preferences work in Android ▶ Building a preference screen ▶ Working with preferences programmatically I would consider myself a power user of computer software, and I’m sure that you’re a power user as well. I know that most programs can be configured to suit my needs (for the most part), and I usually go out of my way to find the settings or preferences to set up my favorite configuration for a given program. application an advantage in regard to usability. Thankfully creating and provid- ing a mechanism to edit preferences in Android are fairly easy processes. you to declaratively as well as programmatically define preferences for your application. Android stores preferences as persistent key-value pairs of primi- tive data types for you. You are not required to store the values in a file, data- base, or any other mechanism. The Android preference framework takes the values you provide and commits them to internal storage on behalf of your application. You can use the preference framework to store booleans, floats, ints, longs, and strings. The data persists across user sessions as well — meaning that if the user closes the app and reopens it later, the preferences are saved and can be utilized. This is true even if your application is killed. how to incorporate it into your applications. I demonstrate how to utilize the built-in PreferenceActivity to create and edit preferences. I also demon- strate how to read and write preferences from code within your application. Task Reminder application. 11/2/10 9:00 AM 314 Part III: Creating a Feature-Rich Application Understanding Android’s Preference Framework One of the great things about the Android preference framework is the sim- plicity of developing a screen that allows the user to modify preferences. preference screen is as simple as defining a preference screen in XML that is located in the res/xml folder of your project. While these XML files are not the same as layout files, they are specific XML definitions that define screens, categories, and actual preferences. Common preferences that are built into the framework include the following: ✓ EditTextPreference: A preference that can store plain text as a string ✓ CheckBoxPreference: A preference that can store a boolean value ✓ RingtonePreference: A preference that allows the user to store a preferred ringtone from those available on the device ✓ ListPreference: A preference that allows the user to select a preferred item from a list of items in the dialog box If the built-in preferences do not suit your needs, you can create your own preference by deriving from the base Preference class or Dialog- Preference. A DialogPreference is the base class for preferences that are dialog box-based. When clicked, these preferences open a dialog box showing the actual preference controls. Examples of built in Dialog- Preferences are EditTextPreference and ListPreference. from and load the preference screens in the same manner that you would load a layout for a basic Activity class. This base class allows you to tap into the PreferenceActivity events and perform some advanced work, such as setting an EditTextPreference to accept only. PreferenceActivity Class The responsibility of the PreferenceActivity class is to show a hierarchy of Preference objects as lists, possibly spanning multiple screens, as shown in Figure 15-1. 11/2/10 9:00 AM Chapter 15: Working with Android’s Preference Framework 315 A preference screen with various preferences listed Figure 15-1: The preference screen for the call settings in Android. Preferences. The SharedPreferences class is an interface for accessing and modifying preference data returned by getSharedPreferences() from any Context object. base class. However, the PreferenceActivity behaves a bit differently. One of the most important features that the PreferenceActivity handles is the displaying of preferences in the visual style that resembles the system prefer- ences. This gives your application a consistent feel across the board in regard to Android user interface components. You should use the Preference- Activity when dealing with preference screens in your Android applications. Because the Android framework stores preferences in the Shared- Preferences, which automatically stores the preference data in internal storage, it is easy for you to create a preference. When a user edits a prefer- ence, the value is automatically saved for you — that’s right, you don’t have to do any persisting yourself! 21_9780470770184-ch15.indd 315 11/2/10 9:00 AM 316 Part III: Creating a Feature-Rich Application I’m sure this sounds like a little bit of black magic, but I assure you it’s not! In Figure 15-2, I am editing an EditTextPreference that will be used in the Task Reminder application. After I select OK, Android takes the value I provided and persists it to SharedPreferences — I don’t need to do anything else. Android does all the heavy lifting in regard to persisting the preference values. Setting a preference. Working with layouts in Android can sometimes be, well, a painstaking process of alignment, gravity, and so on. Building layouts is almost like building a Web site with various tables all over the place. Sometimes it’s easy; sometimes it’s not. Thankfully, laying out Android preferences is much simpler than defining a layout for your application screen. ✓ PreferenceScreen: Represents a top-level preference that is the root of a preference hierarchy. You can use a PreferenceScreen in two places: • In a PreferenceActivity: The PreferenceScreen is not shown because it only shows the containing preferences within the PreferenceScreen definition. 11/2/10 9:00 AM Chapter 15: Working with Android’s Preference Framework 317 • In another preference hierarchy: When present in another hierar- chy, the PreferenceScreen serves as a gateway to another screen of preferences. Think of this as nesting PreferenceScreen decla- rations inside other PreferenceScreen declarations. While this might seem confusing, think of this as XML. In XML you can declare an element, and any element can contain the same parent element. PreferenceScreen. By nesting them, you are informing Android that it should show a new screen when selected. PreferenceCategory: This preference is used to group preference objects and provide a title above the group that describes the category. Preference: A preference that is shown on the screen. This preference could be any of the common preferences or a custom one that you define. Category, and Preference in XML, you can easily create a preference screen that looks similar to Figure 15-1. Creating preferences using the PreferenceActivity and a preference XML file is a fairly straightforward process. The first thing you do is create the preference XML file, which defines the layout of the preferences and the string resource values that show up on the screen. These string resources are presented as TextViews on the screen to help the user determine what the preference is for."
