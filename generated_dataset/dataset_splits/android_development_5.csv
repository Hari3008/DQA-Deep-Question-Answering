,Question,Answer,Context
0,Explain why your gameoptions,". icon—This is a drawable resource representing the icon for the menu item.Your options menu will contain only two options: Settings and Help. Hence,your gameoptions.","A menu resource contains a <menu> tag followed by a number of <item> child ele- ments. Each <item> element represents a menu option and has a number of attrib- utes. The following are some commonly used attributes: . id—This attribute allows you to easily identify the specific menu item.. icon—This is a drawable resource representing the icon for the menu item.Your options menu will contain only two options: Settings and Help. Therefore, your gameoptions.xml menu resource is fairly straightforward: Working with Other Menu Types 139 <menu xmlns:android= ”http://schemas.android.com/apk/res/android” > <item android:id= ”@+id/settings_menu_item” android:title= ”@string/menu_item_settings” android:icon= ”@android:drawable/ic_menu_preferences” ></item> <item android:id= ”@+id/help_menu_item” android:title= ”@string/menu_item_help” android:icon= ”@android:drawable/ic_menu_help” ></item> </menu> You set the title attribute of each menu option by using the same String resources you used on the main menu screen. Note that instead of adding new drawable resources for the options menu icons, you use built-in drawable resources from the Android SDK to have a common look and feel across applications. Did you Know? class just as you would use resources you include in your application package. If you want to see what each of these shared resources looks like, check the Android SDK installed on your machine. Specifically, browse the /platforms direc- tory, choose the appropriate target platform, and check its /data/res/drawable directory. Adding an Options Menu to an Activity For an options menu to show when the user presses the Menu button on the game screen, you must provide an implementation of the onCreateOptionsMenu() method in the QuizGameActivity class. Specifically, you need to inflate (load) the menu resource into the options menu and set the appropriate Intent information for each menu item. Here is a sample implementation of the onCreateOptionsMenu() method for QuizGameActivity: @Override public boolean onCreateOptionsMenu(Menu menu) { super.onCreateOptionsMenu(menu); getMenuInflater().inflate(R.menu. gameoptions, menu); menu.findItem(R.id. help_menu_item).setIntent( new Intent(this, QuizHelpActivity. class)); menu.findItem(R.id. settings_menu_item).setIntent( new Intent(this, QuizSettingsActivity. class)); return true; } 140 HOUR 8: Implementing the Main Menu Screen Handling Options Menu Selections To listen for when the user launches the options menu and selections a menu option, you implement the onOptionsItemSelected() method of the activity. For example, you start the appropriate activity by extracting the intent from the menu item selected as follows: @Override public boolean onOptionsItemSelected(MenuItem item) { super.onOptionsItemSelected(item); startActivity(item.getIntent()); return true; } Did you The method given here for handling onOptionsItemSelected() works as Know? designed. It’s not technically required if the only thing your menu will do is launch the Intent set via the setIntent() method. However, to add any other function- ality to each MenuItem requires the implementation of this method.There you have it: You have created an options menu on the game screen. If you save the class and run the application once more, you will see that you can navi- ptg gate to the game screen, press the Menu button, and use a fully functional options menu (see Figure 8.5). The Been There, Done That! game screen with an options menu. 141 Summary You’ve made excellent progress. The main menu screen is now fully functional, and you’ve learned key skills for developing Android applications, including how to use new layouts such as RelativeLayout, as well as how to use the powerful ListView control. You’ve also learned about the other types of navigation mechanisms avail- able in Android and implemented an options menu on the game screen. Q. What is the difference between a ListView control’s setOnClickListener() method and the setOnItemClickListener() method? A. The setOnClickListener() method listens for a click anywhere in the entire ListView control. The setOnItemClickListener() method listens for a click in a specific View item within the ListView control."
1,Explain why you need to provide layout tem- plates for both display states,"To load the Spinner control from the layout, you use the familiar findViewById() method: final Spinner spinner = (Spinner) findViewById(R.id. Spinner_Gender); Next, you configure your data adapter. A Spinner control displays its data different- ly when it’s closed than when it’s open. Hence,you need to provide layout tem- plates for both display states.","As with a ListView control, a Spinner control uses a data adapter to map its con- tents from a dataset to each view displayed in the control. To load a Spinner control with data, you follow these steps: 1. Retrieve the Spinner control from the layout.To load the Spinner control from the layout, you use the familiar findViewById() method: final Spinner spinner = (Spinner) findViewById(R.id. Spinner_Gender); Next, you configure your data adapter. A Spinner control displays its data different- ly when it’s closed than when it’s open. Therefore, you need to provide layout tem- plates for both display states. Fortunately, the Android platform includes several spe- cial layout resources to help create Spinner controls that contain text. Specifically, ptg you can use the layout resource named android.R.layout.simple_spinner_item to create the appropriate view for each item in a default Spinner control. You can use the android.R.layout.simple_spinner_dropdown_item layout resource as the drop-down view resource template. resource called genders into an ArrayAdapter control by using the createFromResource() method: ArrayAdapter<?> adapter = ArrayAdapter. createFromResource(this, R.array. genders, android.R.layout. simple_spinner_item); adapter.setDropDownViewResource( android.R.layout.simple_spinner_dropdown_item); Finally, you call the setAdapter() method of the Spinner control to bind the data to the control: spinner.setAdapter(adapter); Handling Spinner Selections After the Spinner control has been filled with data, you can control which item is selected by using the setSelection() method. For example, you know that the option for female gender is stored in the string array at index 2 (because you use a 174 HOUR 10: Building Forms to Collect User Input 0-based string array). Because you conveniently decide to map the indexes directly to the gender values, you can set the Spinner control to the Female option by using the setSelection() method, as follows: spinner.setSelection(2); The Spinner class also includes a number of methods for retrieving the current item selected. You want to save the Spinner control option chosen as soon as the user selects one. trol to listen for selection events. Specifically, you need to implement the onItemSelected() method of AdapterView.OnItemSelectedListener, like this: spinner.setOnItemSelectedListener( new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View itemSelected, int selectedItemPosition, long selectedId) { // TODO: Save item index (selectedItemPosition) as Gender setting } ptg // … Other required overrides }); By the With certain versions of the Android SDK, you might also need to provide the Way appropriate stub implementations for other required methods of the AdapterView.OnItemSelectedListener class. Done That! application in the Android emulator. After the splash screen finishes, choose the settings screen option. The screen should look as shown in Figure 10.8. 175 FIGURE 10.8 The Been There, Done That! set- tings screen. Saving Form Data with SharedPreferences You can use the persistent storage mechanism called SharedPreferences to store the application game settings. Using these preferences, you can save all the form values on the settings screen. Earlier you added a string to the QuizActivity base class for your game prefer- ences: public static final String GAME_PREFERENCES = “GamePrefs” ; Now you need to add a preference String name for each of the values you want to store to the QuizActivity class: public static final String GAME_PREFERENCES_NICKNAME = “Nickname” ; // String public static final String GAME_PREFERENCES_EMAIL = “Email” ; // String public static final String GAME_PREFERENCES_PASSWORD = “Password” ; // String public static final String GAME_PREFERENCES_DOB = “DOB” ; // Long public static final String GAME_PREFERENCES_GENDER = “Gender” ; // Int 176 HOUR 10: Building Forms to Collect User Input Saving Settings to SharedPreferences Now that you have defined the preference settings, you can save any committed form field to the game preferences. Within the QuizSettingsActivity class, you begin by defining a SharedPreferences member variable: SharedPreferences mGameSettings; Within the onCreate() method of the activity, you initialize this member variable as follows: mGameSettings = getSharedPreferences( GAME_PREFERENCES, Context. MODE_PRIVATE); You pass in the name of your SharedPreferences (the String called GAME_PREF- ERENCES you created in the QuizActivity class). The mode called MODE_PRIVATE is the default permission used for private application files. SharedPreferences.Editor, assign a specific preference setting, and commit the change. For example, to save the Nickname EditText information, you retrieve the text by using the EditText control’s getText() method: ptg final EditText nicknameText = (EditText) findViewById(R.id. EditText_Nickname); String strNickname = nicknameText.getText().toString(); After you have extracted the String value from the EditText input field, you can save it to SharedPreferences.Editor, using the putString() method: Editor editor = mGameSettings.edit(); editor.putString( GAME_PREFERENCES_NICKNAME, strNickname); editor.commit(); The Nickname, Email, and Password settings can be saved as String values, but the Date of Birth and Gender settings are of long and integer types, respectively. To save these settings, you must extract the value from the appropriate control, convert it if necessary, and save it using the SharedPreferences.Editor methods putLong() and putInt().For now, you can commit the input from the Nickname, Email, and Gender fields."
2,"Explain why within a specific case statement of the onActivityResult() method for the request code TAKE_AVATAR_GALLERY_REQUEST, you can retrieve the URI by inspecting the Intent parameter called data, as follows: Uri photoUri = data","For example, you can create an intent to use within the onLongClick() method to display all images to the user as follows: Intent pickPhoto = new Intent(Intent. ACTION_PICK); pickPhoto.setType(“image/*”); startActivityForResult(pickPhoto, TAKE_AVATAR_GALLERY_REQUEST); When you run the application and long-click the avatar ImageButton control, a gallery of images available on the device is displayed (see Figure 13.5). FIGURE 13.5 Choosing an image from the gallery on the Android emulator. HOUR 13: Working with Images and the Camera The ACTION_PICK Intent action causes a gallery of all images stored on the hand- set to launch, allows the user to choose one image, and returns a URI address to the image’s location. Hence,within a specific case statement of the onActivityResult() method for the request code TAKE_AVATAR_GALLERY_REQUEST, you can retrieve the URI by inspecting the Intent parameter called data, as follows: Uri photoUri = data.","By far, the simplest way to include photo-taking abilities in an application is by launching the ACTION_IMAGE_CAPTURE intent. For example, you could add the fol- lowing code to the onClick() method of the avatar ImageButton control’s OnClickListener: Intent pictureIntent = new Intent( android.provider.MediaStore. ACTION_IMAGE_CAPTURE); startActivityForResult(pictureIntent, TAKE_AVATAR_CAMERA_REQUEST); There is no camera available on the Android emulator. Instead, a mock camera screen is shown, and a fixed graphic is saved whenever the user chooses to take a picture. This is helpful for testing camera functionality using the Android emulator. lator screen should look something like Figure 13.4. HOUR 13: Working with Images and the Camera FIGURE 13.4 Taking a photo- graph using the camera applica- tion in the Android emulator. When launching a “remote” activity—that is, an activity that is not necessarily Know? part of your application—you are effectively sending out an intent that says, “I want to do this. Who can do it for me?” A number of other applications on the handset may have the ability to handle this operation. The Android operating sys- tem attempts to match the most appropriate activity to handle the request. However, if you want the user to be shown a list of applicable activities (or applica- tions) to handle the request, simply wrap your intent within another intent called ACTION_CHOOSER. You often see this mechanism used with common applications such as messaging applications (for example, “Which application do you want to use to send this message?”). You can wrap an intent within a chooser by using the createChooser() method, like this: Intent. createChooser(innerIntent, “Choose which application to handle this”); Although most handsets have only one image-capturing application, as a develop- er, you are better off not making assumptions of this sort. allows the user to take a photograph, and returns the photo. By default, a small bitmap is returned, and it is suitable for your avatar. Within a specific case statement of the onActivityResult() method for the request code Working with Image Media 227 TAKE_AVATAR_CAMERA_REQUEST, you can retrieve the bitmap by inspecting the Intent parameter called data, as follows: Bitmap cameraPic = (Bitmap) data.getExtras().get(“data”); You can then pass the bitmap graphic into your helper method saveAvatar(). Android has a standard intent action called ACTION_PICK that allows the user to choose from a set. This type of intent is often used in conjunction with a URI, but it need not be. This kind of intent can also be used to create a set of all data of a given MIME type on the handset and allow the user to choose an item from the set.For example, you can create an intent to use within the onLongClick() method to display all images to the user as follows: Intent pickPhoto = new Intent(Intent. ACTION_PICK); pickPhoto.setType(“image/*”); startActivityForResult(pickPhoto, TAKE_AVATAR_GALLERY_REQUEST); When you run the application and long-click the avatar ImageButton control, a gallery of images available on the device is displayed (see Figure 13.5). FIGURE 13.5 Choosing an image from the gallery on the Android emulator. HOUR 13: Working with Images and the Camera The ACTION_PICK Intent action causes a gallery of all images stored on the hand- set to launch, allows the user to choose one image, and returns a URI address to the image’s location. Therefore, within a specific case statement of the onActivityResult() method for the request code TAKE_AVATAR_GALLERY_REQUEST, you can retrieve the URI by inspecting the Intent parameter called data, as follows: Uri photoUri = data.getData(); Then, to convert the Uri to a valid Bitmap object, you can use the following method: Bitmap galleryPic = Media.getBitmap(getContentResolver(), photoUri); You can then pass the bitmap into your helper method called saveAvatar(). You now have two methods of retrieving a bitmap graphic to save as the applica- tion avatar. You can use the Bitmap class (android.graphics.Bitmap) to create, manipulate, and save graphics on the device. Watch The Bitmap class encapsulates various bitmap-style graphics formats, including Out! PNG and JPG. Do not confuse this with the bitmap file format (image.bmp). You use the Bitmap class to create and manipulate PNG and JPG graphics on the Android handset. You can use the compress() method of the Bitmap class to save a bitmap in various formats. For example, to save the avatar bitmap to a private application JPG file, you could use the following code: String strAvatarFilename = “avatar.jpg”; avatar.compress(CompressFormat. JPEG, 100, openFileOutput(strAvatarFilename, MODE_PRIVATE)); You can determine the URI address of a file by using the fromFile() method of the Uri class. For example, to determine the URI for the avatar graphics file you just saved using the compress() method, you could use the following: Uri imageUri = Uri. fromFile(new File(getFilesDir(), strAvatarFilename)); Working with Bitmaps 229 After you have saved the avatar to a file and generated the appropriate URI, you can update the ImageButton control contents with the new image. Now, if you run the application and choose an avatar (via the camera or the gallery), the ImageButton control contents will be updated with the appropriate graphic, as shown in Figure 13.6. The Been There, Done That! set- tings screen with a custom avatar. Scaling Bitmap Graphics You can use the createScaledBitmap() method of the Bitmap class to generate thumbnails and such. Watch Out! the original bitmap image’s aspect ratio. Otherwise, the scaled graphic will be stretched and shrunk in odd ways, which lessens its appeal. You can use the BitmapFactory class (android.graphics.BitmapFactory) to decode bitmap objects from various sources, including files, byte arrays, streams, and resources. HOUR 13: Working with Images and the Camera Performing Bitmap Image Transformations You can perform various image transformations, such as rotation operations, on bitmap objects by using the Matrix class (android.graphics.Matrix). This class manages a 3×3 image matrix that can be used for image translations. In this hour, you implemented a new avatar feature on the Been There, Done That! settings screen. The user can set an avatar by taking a picture with the built-in cam- era or by choosing an existing image from the device. You learned how to launch an activity and retrieve its results by using the startActivityForResult() and onActivityResult() methods. Finally, you learned about some of the graphics classes available in the Android SDK. Q. By default, the ACTION_IMAGE_CAPTURE intent returns a small bitmap graphic of the photo taken by the camera. However, the full-size graphic captured by ptg the camera is much larger. Can I access this photograph data? A. You can control the data returned by camera application by supplying some extra data (specifically, the EXTRA_OUTPUT field) to the intent. A. To maintain the aspect ratio of a graphic, simply scale each axis (x and y) by the same percentage. Don’t forget that if you apply scaling to all graphics, some may be down-scaled while others may be up-scaled, using the same code. 231 Workshop Quiz 1. Activity results handled by the onActivityResult() method are differentiat- ed from one another using which parameter? A. requestCode B. resultCode C. data 2. True or False: The ImageButton control is a subclass of the Button control. the .bmp extension. 1. A. The developer-defined requestCode is used to determine which activity ptg (started with the startActivityForResult() method) is returning a result. pleted successfully or was canceled by the user.2. False. The ImageButton control is actually a subclass of ImageView. However, a Button control behaves in a very similar fashion to an ImageButton control because they are both derived from the View class."
3,Explain why you need to add a new layout resource to describe the dialog layout (see Figure 17,"To keep things simple, you can just add a new section at the bottom of the settings screen that acts much like the other settings that rely on a dialog (see Figure 17.1). HOUR 17: Adding Social Features FIGURE 17.1 The settings screen updated to allow for friend requests. ptg controls: <TextView android:id= ”@+id/TextView_Friend_Email” android:layout_width= ”wrap_content” android:layout_height= ”wrap_content” android:text= ”@string/settings_friend_email_label” android:textSize= ”@dimen/help_text_size” android:textStyle= ”bold” ></TextView> <LinearLayout android:id= ”@+id/LinearLayout_Friend_Email” android:orientation= ”horizontal” android:layout_height= ”wrap_content” android:layout_width= ”fill_parent” > <Button android:id= ”@+id/Button_Friend_Email” android:layout_width= ”wrap_content” android:layout_height= ”wrap_content” android:text= ”@string/settings_button_friend_email” ></Button> <TextView android:layout_width= ”fill_parent” android:layout_height= ”fill_parent” android:textSize= ”@dimen/help_text_size” android:textStyle= ”bold” android:gravity= ”center” android:id= ”@+id/TextView_Friend_Email_Tip” android:text= ”@string/settings_friend_email_tip” ></TextView> </LinearLayout> Adding Friend Support to Your Application 295 Like other settings on this screen, the layout updates involve adding several TextView labels and a Button control called Button_Friend_Email. Clicking this button will launch a new dialog. Hence,you need to add a new layout resource to describe the dialog layout (see Figure 17.","3. The players now see each other’s scores on the Scores of Friends tab of the scores screen. By the Way book’s website, http://www.informit.com/title/9780321673350. To add friend support to the Been There, Done That! application, you need to update QuizSettingsActivity to allow the user to input friend email addresses. Specifically, you need to do the following: . Add a button to the settings screen to launch a new dialog. friend’s email address. tion server. You need to update the user interface of the Been There, Done That! application to allow a player to enter friends’ email addresses. There are a number of ways you could go about doing this, of course. You could add a new activity and update the menu screen, allowing for a whole new screen in the application, or you could just update the settings screen with a new area.To keep things simple, you can just add a new section at the bottom of the settings screen that acts much like the other settings that rely on a dialog (see Figure 17.1). HOUR 17: Adding Social Features FIGURE 17.1 The settings screen updated to allow for friend requests. ptg controls: <TextView android:id= ”@+id/TextView_Friend_Email” android:layout_width= ”wrap_content” android:layout_height= ”wrap_content” android:text= ”@string/settings_friend_email_label” android:textSize= ”@dimen/help_text_size” android:textStyle= ”bold” ></TextView> <LinearLayout android:id= ”@+id/LinearLayout_Friend_Email” android:orientation= ”horizontal” android:layout_height= ”wrap_content” android:layout_width= ”fill_parent” > <Button android:id= ”@+id/Button_Friend_Email” android:layout_width= ”wrap_content” android:layout_height= ”wrap_content” android:text= ”@string/settings_button_friend_email” ></Button> <TextView android:layout_width= ”fill_parent” android:layout_height= ”fill_parent” android:textSize= ”@dimen/help_text_size” android:textStyle= ”bold” android:gravity= ”center” android:id= ”@+id/TextView_Friend_Email_Tip” android:text= ”@string/settings_friend_email_tip” ></TextView> </LinearLayout> Adding Friend Support to Your Application 295 Like other settings on this screen, the layout updates involve adding several TextView labels and a Button control called Button_Friend_Email. Clicking this button will launch a new dialog. Therefore, you need to add a new layout resource to describe the dialog layout (see Figure 17.2). Preview of the friend request dialog layout. This layout should be defined as follows in the XML layout file called /res/ layout/friend_entry.xml: <?xml version= ”1.0” encoding= ”utf-8” ?> <LinearLayout xmlns:android= ”http://schemas.android.com/apk/res/android” android:id= ”@+id/root” android:orientation= ”vertical” android:layout_width= ”wrap_content” android:layout_height= ”wrap_content” android:background= ”@drawable/bkgrnd” > <TextView android:id= ”@+id/TextView_Friend_Email” android:layout_width= ”wrap_content” android:layout_height= ”wrap_content” android:textSize= ”@dimen/help_text_size” android:textStyle= ”bold” android:text= ”@string/settings_friend_email” ></TextView> <EditText android:id= ”@+id/EditText_Friend_Email” android:layout_height= ”wrap_content” android:maxLength= ”50” android:layout_width= ”fill_parent” android:maxLines= ”1” android:inputType= ”textEmailAddress” ></EditText> </LinearLayout> The contents of this layout are straightforward. The layout is a LinearLayout con- tainer with two controls: a TextView label that prompts the user to enter an email address and an EditText control to receive the email address string from the user. HOUR 17: Adding Social Features Launching the Friend Request Dialog Clicking the Button control called Button_Friend_Email launches a dialog that allows the user to enter a friend’s email address. This dialog is launched much the same as any other dialog in the settings screen: Button addFriend = (Button) findViewById(R.id. Button_Friend_Email); addFriend.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showDialog( FRIEND_EMAIL_DIALOG_ID); } }); You need to update the onCreateDialog() method of the QuizSettingsActivity class to include a case statement for this new dialog: case FRIEND_EMAIL_DIALOG_ID: final View friendDialogLayout = layoutInflater.inflate( R.layout.friend_entry, (ViewGroup) findViewById(R.id.root)); AlertDialog.Builder friendDialogBuilder = new AlertDialog.Builder(this); friendDialogBuilder.setView(friendDialogLayout); final TextView emailText = (TextView) ptg friendDialogLayout.findViewById(R.id.EditText_Friend_Email); friendDialogBuilder.setPositiveButton( android.R.string.ok, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { String friendEmail = emailText.getText().toString(); if (friendEmail != null && friendEmail.length() > 0) { doFriendRequest(friendEmail); } } }); return friendDialogBuilder.create(); This dialog implementation should look quite familiar. Again, you are building up an AlertDialog control by inflating a layout resource. When the user clicks the OK button in the dialog (see Figure 17.3), the email address is communicated to the application server asynchronously, using the FriendRequestTask class. (We’ll talk more about this in a moment.) The application server is responsible for setting up the friend relationship if the friend’s email address exists in the datastore. 297 FIGURE 17.3 The friend request dialog. ptg To send friend requests to the application server, you need to add another AsyncTask subclass called FriendRequestTask to QuizSettingsActivity. The FriendRequestTask class can be run using the execute() method whenever the player inputs a friend’s email address in the friend request dialog and presses OK. AsyncTask subclasses you have written over the past few hours. (In the following example, exception handling has been removed for clarity and brevity.) The only really interesting part to this new task is the friend request code within the doInBackground() method: @Override protected Boolean doInBackground(String... params) { Boolean succeeded = false; String friendEmail = params[0]; SharedPreferences prefs = getSharedPreferences( GAME_PREFERENCES, Context. MODE_PRIVATE); Integer playerId = prefs.getInt( GAME_PREFERENCES_PLAYER_ID, -1); Vector<NameValuePair> vars = new Vector<NameValuePair>(); vars.add(new BasicNameValuePair(“command”, “add”)); vars.add(new BasicNameValuePair(“playerId”, playerId.toString())); vars.add(new BasicNameValuePair(“friend”, friendEmail)); HttpClient client = new DefaultHttpClient(); HttpPost request = new HttpPost( TRIVIA_SERVER_FRIEND_EDIT); request.setEntity(new UrlEncodedFormEntity(vars)); ResponseHandler<String> responseHandler = new BasicResponseHandler(); 298 HOUR 17: Adding Social Features String responseBody = client.execute(request, responseHandler); if (responseBody != null) { succeeded = true; } return succeeded; } Here, you use HttpClient to execute an HTTP POST request, using form variables, to the application server. You can form the HttpPost request object by combining the appropriate application server URL with the query variables, encoded using the handy UrlEncodedFormEntity class, set as the entity for the POST request. When the query is fully formed, you can execute the request by using the execute() method of HttpClient, as you have in previous examples. Then you simply check the response to determine whether the friend request was successful by checking the resulting ResponseHandler object. Now that players can add friends, you need to update QuizScoresActivity to pop- ulate the Scores of Friends tab with live data from the application server. Luckily, this feature is straightforward because the application server is the primary handler ptg for friend relationships. Retrieving friends’ scores is simply a slightly different query on the application server datastore. displaying the all-time-high scores, except that the application server URL for the data request includes the identifier of the player. The application server then knows you want to filter the scores to just those connected to that player. ScoreDownloaderTask to retrieve these scores and populate the Scores of Friends tab (see Figure 17.4). When you have the scores screen working with live data, you can remove the mock XML resource files and any associated code from the project. 299 FIGURE 17.4 The Scores of Friends tab. Enhancing Player Relationships Enabling friend relationships can greatly enhance the experience for users in a vari- ety of ways above and beyond what you have implemented thus far. Adding friend support may seem like a very lightweight social feature, but imagine how you can build up more social features from this simple starting point. Player relationships allow developers the flexibility to enhance applications in a variety of ways, such as the following: . The application server could send an email invitation to any friend who did not already exist in the database. (web, iPhone, BlackBerry, and so on) could easily be added. This means friends could contact the same application server and play each other across platforms.. Friend relationships could be one way or two way (showing up on one or both players’ Friends lists). Different trust relationships could be established, allow- ing players access to different types of information about other players, including friends’ answers to questions and their favorite place in the world. HOUR 17: Adding Social Features . After a friend relationship has been established, more application features could be added, including challenges, messaging, notifications…the sky’s the limit. Use your imagination. seem incomplete—and it is! Any application incorporating a similar friends features should, at minimum, allow the player to manage (for example, view, delete) his or her existing friend relationships. However, these improvements are left as exercises for the reader. Services Social networking has really come into its own in the past few years, allowing peo- ple to connect, keep in touch, and share information (for better or worse) about their lives. Many social networking sites have developed APIs for third-party devel- opers, many of which are web services based on representational state transfer (REST). There has been an explosion in the number of applications available for ptg social networks, such as Facebook. ment programs and the API provided by the specific site or service. The level of inte- gration may range from lightweight to complete. Here are some examples of social networking integration you could consider in an Android application: . Giving the user the option to automatically tweet on Twitter when he or she wins a game."
4,Explain why a service is started to perform background processing,"4. A. An App Widget runs in another process so must be responsive to requests. returns. Hence,a service is started to perform background processing.","3. True. Each cell is typically defined as 74 pixels, but when adding up the num- ber for multiple cells, 2 pixels are subtracted. Thus, 2 cells wide would be (74×2) – 2, or 146 pixels.4. A. An App Widget runs in another process so must be responsive to requests. returns. Therefore, a service is started to perform background processing. 1. Modify the App Widget in the Been There, Done That! application to show information about a friend. (The XML returned for the friend’s scores contains the nickname, score, rank, and avatar URL.) ptg 2. Add a configuration activity that allows the user to choose which friend to show. multiple instances, one showing the user’s data and the other showing a friend’s data. Internationalizing Your Application What You’ll Learn in This Hour: . Languages supported by the Android platform . Managing strings and other resources . Localized formatting utilities . Other internationalization concerns ptg The mobile marketplace is global—serving a variety of users in many countries and many locales. Developers need to keep this in mind when designing and developing applications for the Android platform; applications will likely be used by foreign-speaking users. In this hour, you learn about the localization features of the Android platform and the Android Market. Way In Hour 24, “Publishing on the Android Market,” you’ll learn how your application can be made available for distribution within the Android Market. With a global marketplace, developers can maximize profits and grow their user base by supporting a variety of different languages and locales. Let’s take a moment to clarify some terms. While you likely know what we mean by language, you may not be aware that each language may have a number of different locales. For example, the Spanish spoken in Spain is quite different from that spoken in the Americas, the French spoken in Canada differs from that of Europe and Africa, and the English spoken in the United States differs from that spoken in Britain. English is a language, while English (United States), English (United Kingdom), and English (Australia) are locales (see Figure 19.1). HOUR 19: Internationalizing Your Application FIGURE 19.1 People who G'day! Hello! Hi! speak the same language often have localized dialects. British American Applications are made up of data and functions (behavior). For most applications, the behavior is the same, regardless of the locale. However, the data must be local- ized. This is one of the key reasons resource files exist—to externalize application data. of text used by the application. For example, a string of data might represent a user’s name, but the text label for that value on an application screen would need to be shown in the proper language (for example, Name, Nom, Nombre). Development platforms that support internationalization typically allow for string tables, which can be swapped around so that the same application can target differ- ent languages. The Android platform is no exception. Do not hard code string information into an application (that is, the Java source Out! file) unless absolutely necessary. Doing so hinders internationalization efforts. Compared to other mobile platforms, the Android SDK provides reasonably exten- sive support for internationalization. However, this is a fairly complex topic with lots of caveats—and the Android documentation in this area is virtually nonexistent. . The languages and locales supported by the Android platform (an extensive list—the superset of all available languages) . The languages and locales supported by a specific Android handset (a list that varies—a subset of languages chosen by a handset manufacturer or operator) How Android Localization Works 323 . The countries, languages, and locales supported by the Android Market appli- cation (the countries and locales where Google can sell legally; this list grows continuously) The specific locales supported by Android (as of this writing) are shown in Table 19.1. Languages and Regions Supported in Android Language Regions Chinese (zh) PRC (zh_CN) Taiwan (zh_TW) Czech (cs) Czech (cs_CZ) Dutch (nl) Netherlands (nl_NL) Belgium (nl_BE) English (en) United States (en_US) Britain (en_GB) Canada (en_CA) ptg Australia (en_AU) New Zealand (en_NZ) Singapore (en_SG) French (fr) France (fr_FR) Belgium (fr_BE) Canada (fr_CA) Switzerland (fr_CH) German (de) Germany (de_DE) Austria (de_AT) Switzerland (de_CH) Liechtenstein (de_LI) Italian (it) Italy (it_IT) Switzerland (it_CH) Japanese (jp) Japan (jp_JP) Korean (ko) South Korea (ko_KR) Polish (pl) Poland (pl_PL) Russian (ru) Russia (ru_RU) Spanish (es) Spain (es_ES) 324 HOUR 19: Internationalizing Your Application Did you The locales are likely to be enhanced. The latest list of locales can be viewed at Know? http://developer.android.com/sdk/android-2.1.html#locs. Locale Much like other operating systems, the Android platform has a system setting for locale. This setting has a default setting that can be modified by the mobile opera- tor. For example, a German mobile operator might make the default locale Deutsch (Deutschland) for its shipping handsets. An American mobile operator would likely set the default locale to English (American) and also include an option for the locale Español (Estados Unidos)—thus supporting American English and Spanish of the Americas.A user can change the system-wide setting for locale in the Settings application. The locale setting affects the behavior of applications installed on the handset. Try It Yourself ptg To change the locale on a handset, perform the following steps: 1. From the Home screen, click the Menu button and choose Settings. changes the locale on the system. For example, if you choose Español, you see that many of the menus on the Android platform are now in Spanish."
5,"Explain why 2 cells wide would be (74×2) – 2, or 146 pixels","3. True. Each cell is typically defined as 74 pixels, but when adding up the num- ber for multiple cells, 2 pixels are subtracted. Hence,2 cells wide would be (74×2) – 2, or 146 pixels.","Q. How do I add more interactive features, such as Button controls, to an App Widget? A. If you want to add configuration controls to an App Widget and allow the user to trigger updates to the App Widget content, you need to define each event separately and implement the appropriate click handlers to send specific event commands, via PendingIntent objects, to a registered receiver of the Intent objects. Then the App Widget application needs to receive the com- mands and process them accordingly, updating the App Widget content as necessary. You can find a complete example of an interactive App Widget pro- vided in our article “Handling User Interaction with Android App Widgets,” available at http://www.developer.com/ws/article.php/3837531/Handling- User-Interaction-with-Android-App-Widgets.htm. 319 Q. Can I have multiple instances of an App Widget? A. Having multiple instances doesn’t make sense with the App Widget you implemented for the Been There, Done That! application. However, in certain instances, it might make sense to allow the user to have multiple instances of an App Widget with different configurations. One way to accomplish this is to allow the user to configure each App Widget instance using the configuration activity defined for the App Widget. Then, the application must keep track of the differences between the instances by keeping track of the user configura- tion activity for each App Widget identifier. We also cover this advanced topic in our article “Handling User Interaction with Android App Widgets” (see the previous Q&A for details). Quiz 1. True or False: App Widgets can reside only on the Home screen. 2. Which of the following is an example of a View widget that cannot be used with an App Widget? A. Button B. WebView C. ProgressBar 3. True or False: Although App Widgets are defined in pixels, their size must cor- respond directly to a certain number of cells. A. To handle lengthy background operations B. To handle drawing directly on the screen C. To access private data 320 HOUR 18: Creating a Home Screen App Widget Answers 1. False. App Widgets can reside within an application that implements an AppWidgetHost object.3. True. Each cell is typically defined as 74 pixels, but when adding up the num- ber for multiple cells, 2 pixels are subtracted. Thus, 2 cells wide would be (74×2) – 2, or 146 pixels.4. A. An App Widget runs in another process so must be responsive to requests. returns. Therefore, a service is started to perform background processing. 1. Modify the App Widget in the Been There, Done That! application to show information about a friend. (The XML returned for the friend’s scores contains the nickname, score, rank, and avatar URL.) ptg 2. Add a configuration activity that allows the user to choose which friend to show. multiple instances, one showing the user’s data and the other showing a friend’s data. Internationalizing Your Application What You’ll Learn in This Hour: . Languages supported by the Android platform . Managing strings and other resources . Localized formatting utilities . Other internationalization concerns ptg The mobile marketplace is global—serving a variety of users in many countries and many locales. Developers need to keep this in mind when designing and developing applications for the Android platform; applications will likely be used by foreign-speaking users. In this hour, you learn about the localization features of the Android platform and the Android Market. Way In Hour 24, “Publishing on the Android Market,” you’ll learn how your application can be made available for distribution within the Android Market. With a global marketplace, developers can maximize profits and grow their user base by supporting a variety of different languages and locales. Let’s take a moment to clarify some terms. While you likely know what we mean by language, you may not be aware that each language may have a number of different locales. For example, the Spanish spoken in Spain is quite different from that spoken in the Americas, the French spoken in Canada differs from that of Europe and Africa, and the English spoken in the United States differs from that spoken in Britain. English is a language, while English (United States), English (United Kingdom), and English (Australia) are locales (see Figure 19.1). HOUR 19: Internationalizing Your Application FIGURE 19.1 People who G'day! Hello! Hi! speak the same language often have localized dialects. British American Applications are made up of data and functions (behavior). For most applications, the behavior is the same, regardless of the locale. However, the data must be local- ized. This is one of the key reasons resource files exist—to externalize application data. of text used by the application. For example, a string of data might represent a user’s name, but the text label for that value on an application screen would need to be shown in the proper language (for example, Name, Nom, Nombre). Development platforms that support internationalization typically allow for string tables, which can be swapped around so that the same application can target differ- ent languages. The Android platform is no exception. Do not hard code string information into an application (that is, the Java source Out! file) unless absolutely necessary. Doing so hinders internationalization efforts. Compared to other mobile platforms, the Android SDK provides reasonably exten- sive support for internationalization. However, this is a fairly complex topic with lots of caveats—and the Android documentation in this area is virtually nonexistent. . The languages and locales supported by the Android platform (an extensive list—the superset of all available languages) . The languages and locales supported by a specific Android handset (a list that varies—a subset of languages chosen by a handset manufacturer or operator) How Android Localization Works 323 . The countries, languages, and locales supported by the Android Market appli- cation (the countries and locales where Google can sell legally; this list grows continuously) The specific locales supported by Android (as of this writing) are shown in Table 19.1. Languages and Regions Supported in Android Language Regions Chinese (zh) PRC (zh_CN) Taiwan (zh_TW) Czech (cs) Czech (cs_CZ) Dutch (nl) Netherlands (nl_NL) Belgium (nl_BE) English (en) United States (en_US) Britain (en_GB) Canada (en_CA) ptg Australia (en_AU) New Zealand (en_NZ) Singapore (en_SG) French (fr) France (fr_FR) Belgium (fr_BE) Canada (fr_CA) Switzerland (fr_CH) German (de) Germany (de_DE) Austria (de_AT) Switzerland (de_CH) Liechtenstein (de_LI) Italian (it) Italy (it_IT) Switzerland (it_CH) Japanese (jp) Japan (jp_JP) Korean (ko) South Korea (ko_KR) Polish (pl) Poland (pl_PL) Russian (ru) Russia (ru_RU) Spanish (es) Spain (es_ES) 324 HOUR 19: Internationalizing Your Application Did you The locales are likely to be enhanced. The latest list of locales can be viewed at Know? http://developer.android.com/sdk/android-2.1.html#locs. Locale Much like other operating systems, the Android platform has a system setting for locale. This setting has a default setting that can be modified by the mobile opera- tor. For example, a German mobile operator might make the default locale Deutsch (Deutschland) for its shipping handsets. An American mobile operator would likely set the default locale to English (American) and also include an option for the locale Español (Estados Unidos)—thus supporting American English and Spanish of the Americas."
