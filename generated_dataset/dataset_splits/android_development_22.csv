,Question,Answer,Context
0,"Explain why web apps limit all local file access, can only perform web-based actions inside the context of a browser, and restrict data access to a single domain","Web apps, however, are far more restrictive because of the potentially malicious nature of scripting. Hence,web apps limit all local file access, can only perform web-based actions inside the context of a browser, and restrict data access to a single domain.","8 ❘ chaPter 1 IntroducIng Flash development For mobIle devIces table 1-2: API Support aPi anDroiD ios Touch/Gestures X X Accelerometer X X Geolocation Sensor X X Camera X Microphone X StageWebView X CameraRoll/Photo Library X Add to library only File I/O X X SQLite database X X Ability to launch mobile services via URL protocol, such as X X Phone (tel:) and E-mail (mailto:) and SMS (sms:) As you can see, some core mobile services are unsupported: ➤ ➤ Native UI controls ➤ ➤ Music player and library ➤ ➤ Bluetooth ➤ ➤ Contacts ➤ ➤ Calendar ➤ ➤ Preferences The areas of strongest support center on multitouch and gesture events, Accelerometer, and persistent file and database storage. Both AIR for Android and Packager for iPhone are weaker than their native SDK counterparts in being able to integrate with other parts of the respective devices — both hardware and system services. Therefore, as you architect your apps, factor in those constraints. When creating mobile applications, you have access to many parts of the core AS3 library and AIR API extensions. However, not all core and AIR functionality is supported on Android and iOS. The following is a list of AS3 API objects or members that are not supported: ➤ ➤ Accessibility ➤ ➤ DNSResolver Understanding the air for android security Model ❘ 9 ➤➤ DockIcon ➤➤ DRMManager ➤➤ EncryptedLocalStore ➤➤ HTMLLoader ➤➤ LocalConnection ➤➤ NativeApplication exit(), isSetAsDefaultApplication(), menu, and startAtLogin ➤➤ NativeMenu ➤➤ NativeProcess ➤➤ NativeWindow and NativeWindow.notifyUser() ➤➤ NetworkInfo ➤➤ PDF support ➤➤ PrintJob ➤➤ Socket support (DatagramSocket, SecureSocket, ServerSocket) ➤➤ Shader ➤➤ ShaderFilter ➤➤ Socket.bind() ➤➤ StorageVolumeInfo ➤➤ XMLSignatureValidator What’s more, although you can use Flash Builder to create AIR for Android apps, the Flex MXML framework is not officially supported on Android and incompatible with iOS. AIR for Android carries over the same basic security model that Adobe created for the desktop version of AIR. In the traditional desktop environment, desktop apps get permission in terms of what they can do and cannot do from the OS and the available permissions of the currently logged in user. They receive this level of access because the users need to explicitly install the app — effectively telling their computer that they trust the app they are about to launch. As a result, native apps have access to read and write to the local file system and perform other typical desktop functions.Web apps, however, are far more restrictive because of the potentially malicious nature of scripting.As a result, web apps limit all local file access, can only perform web-based actions inside the context of a browser, and restrict data access to a single domain.The hybrid nature of an AIR for Android application puts it somewhere between the traditional desktop and restrictive web security models. On the one hand, you can create an Android application 10 ❘ chaPter 1 IntroducIng Flash development For mobIle devIces that runs on top of the normal Android OS security layer. Therefore, it is able to read and write from the local file system. However, because AIR utilizes web technologies that, if unchecked, could be hijacked by a malicious third party and used in harmful ways when accessing the local system, AIR has a security model to guard against that happening. Specifically, AIR for Android grants permissions to each source or data file in an AIR application based on their origin and places them into one of two kinds of sandboxes."
1,Explain why you need to use a special set of URLs to integrate with these services,"There’s two types of integration that’s possible: through AIR API and through URL protocols. Using the AIR API, you can directly access Camera, Camera Roll, and Microphone for Android devices. I’ll cover that in Chapter 10. (As of the time of writing, iOS devices do not provide support for Camera, CameraRoll, and Microphone.) Other Android and iOS services don’t have direct API access through AS3. Hence,you need to use a special set of URLs to integrate with these services.","This information is passed to a sendData() method, which makes the server request: public function sendData(url:String, vars:URLVariables):void { var request:URLRequest = new URLRequest(url); var loader:URLLoader = new URLLoader(); request.data = vars; request.method = URLRequestMethod.POST; loader.addEventListener(Event.COMPLETE, loaderCompleteHandler); sending geolocation to a Web service ❘ 173 loader.addEventListener(IOErrorEvent.IO_ERROR, iOErrorHandler); loader.load(request); } Code snippet FindMeAPizza.as The loaderCompleteHandler() method is called when a response is received from the server. It is responsible for processing the XML data received from the server and displaying key pizza shop information in the tfInfo TextField. The code for the handler is provided here: private function loaderCompleteHandler(event:Event):void { // Get the response and convert it to XML. try { var xml:XML = cleanResponse(response); } catch(error:TypeError) { writeLn(“The response data was not in valid XML format”); } // Get all <Result> children. There’s only one in this case, but // you could expand to handle multiple results. var results:XMLList = xml.descendants(“Result”); // If no matches, let the user know the bad news. { writeLn(“You are at least 300 miles from the nearest pizza shop. } // Otherwise, write out the closest match. { for each(item in results) { var s:String = “Your closest pizza shop is: \n” + item.Title + “\n” + item.Address + “\n” + item.City + “, “ + item.State + “\n” + item.Phone; writeLn(s); } } } Code snippet FindMeAPizza.as As you can see, the response variable receives the raw XML data, which is then cleaned up and converted to an XML variable by cleanResponse(). The XML fragment is processed and displayed on-screen. The complete source code is provided in Listing 8-4. package { import flash.display.SimpleButton; import flash.display.Sprite; import flash.display.StageAlign; import flash.display.StageScaleMode; import flash.events.*; import flash.events.GeolocationEvent; import flash.net.*; import flash.net.URLVariables; import flash.sensors.Geolocation; import flash.text.TextField; import flash.text.TextFormat; /** * Document class for FindMeAPizza application. * * @author Rich Wagner * */ public class FindMeAPizza extends Sprite { // Geolocation private var geo:Geolocation; // TextField private var tfInfo:TextField; // Coordinates private var longitude:Number; private var latitude:Number; /** * Constructor * */ public function FindMeAPizza() { stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; tfInfo = new TextField(); var format:TextFormat = new TextFormat(“Helvetica”, 20); format.color = 0xffffff; tfInfo.defaultTextFormat = format; tfInfo.border = true; sending geolocation to a Web service ❘ 175 tfInfo.wordWrap = true; tfInfo.multiline = true; tfInfo.x = 10; tfInfo.y = 10; tfInfo.height = stage.stageHeight - 80; tfInfo.width = stage.stageWidth - 20; addChild(tfInfo); // Geolocation setup if (Geolocation.isSupported) { geo = new Geolocation(); geo.setRequestedUpdateInterval(5000); geo.addEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler); geo.addEventListener(StatusEvent.STATUS, geolocationStatusHandler); // Enable the button if the location is provided. buttonClickHandler); tfInfo.text = “Click the Find button to find your nearest pizza shop.”; } else { tfInfo.text = “Can’t find where you are. No pizza for you.”; } } /** * Triggers a pizza lookup * * @param event * */ private function buttonClickHandler(event:MouseEvent):void { fetch(); } /** * Main routine for fetching pizza data. Sets up URL params. */ public function fetch():void { var url:String = “http://local.yahooapis.com/LocalSearchService/V3/localSearch”; var variables:URLVariables = new URLVariables(); variables.appid= “x77v8JvV34GL7auv9T_lFPBhWqJIEwk..3DpsJ3Ds0LODlQA1qdshBHMreEbYEI3y_iGUuMGBvVJr Q”; continues 176 ❘ chaPter 8 geolocatIon apI listinG 8-4 (continued) variables.query=”pizza”; variables.latitude = latitude; variables.longitude = longitude; variables.radius = “300”; variables.results = “1”; sendData(url, variables); } /** * Helper function that makes the URL request to Yahoo * * @param url * @param vars * */ public function sendData(url:String, vars:URLVariables):void { var request:URLRequest = new URLRequest(url); var loader:URLLoader = new URLLoader(); request.data = vars; request.method = URLRequestMethod.POST; loader.addEventListener(Event.COMPLETE, loaderCompleteHandler); loader.addEventListener(IOErrorEvent.IO_ERROR, iOErrorHandler); loader.load(request); } /** * Handler for server response * * @param event * */ private function loaderCompleteHandler(event:Event):void { // Get the response and convert it to XML. try { var xml:XML = cleanResponse(response); } catch(error:TypeError) { writeLn(“The response data was not in valid XML format”); } // Get all <Result> children. There’s only one in this // case, but you could expand to handle multiple results. var results:XMLList = xml.descendants(“Result”); // If no matches, let the user know the bad news. { sending geolocation to a Web service ❘ 177 writeLn(“You are at least 300 miles from the nearest pizza shop. No pizza for you. “); } // Otherwise, write out the closest match. { for each(item in results) { var s:String = “Your closest pizza shop is: \n” + item.Title + “\n” + item.Address + “\n” + item.City + “, “ + item.State + “\n” + item.Phone; writeLn(s); } } } /** * Handler for IO errors with server * * @param event * */ private function iOErrorHandler(event:IOErrorEvent):void { writeLn(“Error loading URL.”); } /** * Called each time the geolocation service updates app * * @param event * */ private function geolocationUpdateHandler(event:GeolocationEvent):void { latitude = event.latitude; longitude = event.longitude; } /** * Helper utility method for writing text to the UI. * @param s - text to write * */ private function writeLn(s:String):void { tfInfo.text = s; continues 178 ❘ chaPter 8 geolocatIon apI listinG 8-4 (continued) } /** * Strips out unneeded namespace and schema definitions * * @param response - raw XML feed * * @returns XML instance * */ private function cleanResponse(response:String):XML { const NP1:String = ‘xmlns=”urn:yahoo:lcl”’; const NP2:String = ‘xmlns:xsi=”http://www.w3.org/2001/XMLSchema- instance”’; const NP3:String = ‘xsi:schemaLocation=”urn:yahoo:lcl http://local.yahooapis.com/LocalSearchService/V3/LocalSearchResponse.xsd”’; response = response.replace(NP1, ““); response = response.replace(NP2, ““); response = response.replace(NP3, ““); return new XML(response); } } } running the app After installing the FindMeAPizza app onto your Android or iPhone device, you can run it to display your local pizza shop (see Figure 8-12). In this chapter, you discovered how to work with the geographi- cal sensor of Android and iPhone and the geolocation API. You looked at four sample apps, each of which uses various aspects of geolocation services. In one of the examples, you learned how to work with directional data to create a compass app. learned how to send the geolocation data to a web service to create real-time geographical-based apps. 9 > service integration Using ebook.com ow Url Protocols .wwww What’s in this chaPter? ➤➤ ! eBook < Make phone calls and send SMS messages ow ➤➤ Send e-mails W ➤➤ Use GoogleMaps in your apps Certainly, one of the most potentially exciting aspects of an application that is written specifi - nload fromw cally for Android or iPhone is the ability to integrate your app with mobile services, such as Do phone, e-mail, and Google Maps. After all, if you can do so, you break out of the solo application silo and extend its reach across mobile devices.There’s two types of integration that’s possible: through AIR API and through URL protocols. Using the AIR API, you can directly access Camera, Camera Roll, and Microphone for Android devices. I’ll cover that in Chapter 10. (As of the time of writing, iOS devices do not provide support for Camera, CameraRoll, and Microphone.) Other Android and iOS services don’t have direct API access through AS3. As a result, you need to use a special set of URLs to integrate with these services. I’ll cover how to do this in this chapter.This chapter shows you how to integrate your app with Android and iOS services using URL protocols for the following services: ➤➤ Phone ➤➤ SMS ➤➤ Mail ➤➤ Google Maps 180 ❘ chaPter 9 servIce IntegratIon usIng url protocols At the same time, it demonstrates how to add an ActionScript wrapper around these protocols to provide your own custom-made AS3 API for Android and iPhone Services. Rather than work directly with URL protocols in my application code, I decided that I’d rather create a set of classes that can be called. What’s more, should the access method of calling these Android services ever change, I’d have the option to alter the underlying implementation of these classes rather than modify my application source code."
2,Explain why you can use the SQL database library API that is part of AIR to work with a local database in your mobile application,"All operations you perform on the database are not done with AS3, but SQL (Structured Query Language), which is the standard query and data management language for relational databases. Using SQL, you can create tables, perform queries, and insert or modify records. One component of the underlying Adobe Integrated Runtime (AIR) engine that is part of AIR for Android run time and compiled into Flash-based iOS apps is SQLite, a SQL relational database engine. Hence,you can use the SQL database library API that is part of AIR to work with a local database in your mobile application.","As shown in the example, an event listener is added to the FileStream instance to deal with any IO errors. You can handle them using a trace() call: private function ioWriteErrorHandler(evt:Event):void { trace(“Unable to save”); } opening a File Jots needs to be able to open a previously saved MyDataFile.text file. Clicking the Open button calls the openBtnClickHandler() method. This function uses openAsync() to open the file stream asynchronously. Because you are opening asynchronously, define handlers to be called when the file has been read or an IO error occurs: private function openBtnClickHandler(event:MouseEvent):void { var fileStream:FileStream = new FileStream(); fileStream.openAsync(file, FileMode.READ); fileStream.addEventListener(Event.COMPLETE, completeHandler); fileStream.addEventListener(IOErrorEvent.IO_ERROR, ioReadErrorHandler); } Code snippet Jots.as The file is being read asynchronously, so place the FileStream’s read routine inside the Event.COMPLETE handler. Specifically, call readUTFBytes(), which assigns the contents of the file stream to the s variable. This string’s value is assigned to the text property of the TextArea. Here’s the code: private function completeHandler(event:Event):void { var fileStream:FileStream = event.target as FileStream; var s:String = fileStream.readUTFBytes(fileStream.bytesAvailable); ta.text = s; fileStream.close(); } Code snippet Jots.as Finally, add an event handler in case an IO error occurs in the open process: private function ioReadErrorHandler(event:Event):void { trace(“Unable to open” + file.nativePath); } Listing 11-1 shows the complete listing for Jots.as. listinG 11-1: Jots.as package { import flash.display.MovieClip; // Events import flash.events.MouseEvent; import flash.events.IOErrorEvent; import flash.events.Event; // Minimal Comps components import com.bit101.components.PushButton; import com.bit101.components.TextArea; // File-related import flash.filesystem.File; import flash.filesystem.FileMode; import flash.filesystem.FileStream; // Stage setup import flash.display.StageAlign; import flash.display.StageScaleMode; /** * Document class for Jots application. * * @author Rich Wagner * */ public class Jots extends MovieClip { private var ta:TextArea; private var openBtn:PushButton; private var saveBtn:PushButton; public var file:File; public function Jots() { // Set up the stage stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; // Create TextField ta = new TextArea(); ta.x = 10; ta.y = 10; ta.height = stage.stageHeight - 120; ta.width = stage.stageWidth - 20; addChild(ta); // Create Open button openBtn = new PushButton(); continues 252 ❘ chaPter 11 FIle management listinG 11-1 (continued) openBtn.label = “Open”; openBtn.x = 10; openBtn.y = stage.stageHeight - 100; openBtn.height = 70; openBtn.width = 200; openBtn.addEventListener(MouseEvent.CLICK, openBtnClickHandler); addChild(openBtn); // Create Save button saveBtn = new PushButton(); saveBtn.label = “Save”; saveBtn.x = 240; saveBtn.y = stage.stageHeight - 100; saveBtn.height = 70; saveBtn.width = 200; saveBtn.addEventListener(MouseEvent.CLICK, saveBtnClickHandler); addChild(saveBtn); // Create pointer to file file = File.applicationStorageDirectory.resolvePath(“MyDataFile.txt”); } private function openBtnClickHandler(event:MouseEvent):void { var fileStream:FileStream = new FileStream(); fileStream.openAsync(file, FileMode.READ); fileStream.addEventListener(Event.COMPLETE, completeHandler); fileStream.addEventListener(IOErrorEvent.IO_ERROR, ioReadErrorHandler); } private function completeHandler(event:Event):void { var fileStream:FileStream = event.target as FileStream; var str:String = fileStream.readUTFBytes(fileStream.bytesAvailable); ta.text = str; fileStream.close(); } private function ioReadErrorHandler(event:Event):void { trace(“Unable to open” + file.nativePath); } private function saveBtnClickHandler(event:MouseEvent):void { var fileStream:FileStream = new FileStream(); fileStream.openAsync(file, FileMode.WRITE); fileStream.addEventListener(IOErrorEvent.IO_ERROR, onIOWriteError); var str:String = ta.text; str = str.replace(/\r/g, “\n”); summary ❘ 253 str = str.replace(/\n/g, File.lineEnding); fileStream.writeUTFBytes(str); fileStream.close(); } private function ioWriteErrorHandler(event:Event):void { trace(“Unable to save”); } } } running jots Once you compile the Flash project and install the .apk file onto your Android device, you can run it. Figure 11-2 shows the Jots app with notes in it. In this chapter, you explored how to work with file I/O inside of your Android and iOS applications. You discov- ered how to work with the File object. You also learned how the directories you can access differ between Android and iOS devices. Finally, I walked you through a sample application that showed how to read and write to a text file. 12 local databases What’s in this chaPter? ➤➤ Introducing SQLite ➤➤ Opening a database connection ➤➤ Selecting records from the database ➤➤ Inserting or updating records Although you can use XML or binary fi les to store application or user data, you also can make full use of relational SQL databases right inside your Android and iOS applications. This chapter introduces you to working with local relational databases in your Android and iOS apps.All operations you perform on the database are not done with AS3, but SQL (Structured Query Language), which is the standard query and data management language for relational databases. Using SQL, you can create tables, perform queries, and insert or modify records. One component of the underlying Adobe Integrated Runtime (AIR) engine that is part of AIR for Android run time and compiled into Flash-based iOS apps is SQLite, a SQL relational database engine. As a result, you can use the SQL database library API that is part of AIR to work with a local database in your mobile application.SQLite is a lightweight open-source database engine that stores relational database data in a local fi le (often with a .db extension) that you can specify. (For more information on SQLite, go to www.sqlite.org.) For example, using SQLite, you can create database-oriented apps that run offl ine and sync with a back-end server periodically when the user is connected to the Internet. You may also want to use the database as an alternative to storing application data in a local XML or binary fi le. oPen a Database connection To work with a local database in your Android or iOS app, you need to establish a connection to the database file using the SQLConnection object. Much like file input/output (see Chapter 11), you can connect to the database synchronously or asynchronously."
3,Explain why you need to assign a value to it before the query is executed,"Suppose, for example, that you want to retrieve all the entries for a given feed. You could do that with a SELECT statement like this: SELECT * FROM feedEntries WHERE feedId = 100 However, to make the call more generic, you would want to use a parameter to represent the feedId: SELECT * FROM feedEntries WHERE feedId = :feedId You can then assign a value to the feedId in your AS3 code and use that for your SELECT query.To use that SELECT query in your app, you can use the following code: public function fetch(feed:Feed):void { const SELECT_ENTRIES_BY_FEED_ID:String = “SELECT * FROM feedEntries WHERE feedId = :feedId”; var sqlStatement:SQLStatement = new SQLStatement(); sqlStatement.sqlConnection = _connection; sqlStatement.text = SELECT_ENTRIES_BY_FEED_ID; sqlStatement.parameters[“:feedId”] = feed.uid; sqlStatement.execute(); // For each record in result set, add as a feedEntry instance var sqlResult:SQLResult = sqlStatement.getResult(); var entries:Array = sqlResult.data; var entry:FeedEntry; inserting and Updating records ❘ 263 if (entries) { for (var i:int=0; i<entries.length; i++) { entry = new FeedEntry(entries[i]); entry.feedId = feed.uid; feed.entries.push(entry); } } } In this code, the SQLStatement instance is assigned the SELECT query defined in the SELECT_ ENTRIES_BY_FEED_ID constant. As you can see, the :feedId is defined as a parameter in the SQL command. Hence,you need to assign a value to it before the query is executed.","The source code has matching AS3 classes, as shown in Listings 12-1 and 12-2. package com.richwagner.feed { /** * Feed is a model class for RSS feeds. * @author Rich Wagner * */ public class Feed { private var _uid:int; private var _url:String; private var _entries:Vector.<FeedEntry>; private var _lastFetched:Date; private var _logoUrl:String; private var _name:String; /** * Constructor * */ continues 260 ❘ chaPter 12 local databases listinG 12-1 (continued) public function Feed() { _entries = new Vector.<FeedEntry>(); } /** * * Getters and Setters * */ > public function get uid():int { return _uid; ebook.com } ow .w public function set uid(value:int):void ww { w _uid = value; } public function get entries():Vector.<FeedEntry> ! eBook < { ow return _entries; W } public function set entries(value:Vector.<FeedEntry>):void nload from { w _entries = value; Do } public function get url():String { return _url; } public function set url(value:String):void { _url = value; } public function get lastFetched():Date { return _lastFetched; } public function set lastFetched(value:Date):void { _lastFetched = value; } public function get logoUrl():String { Creating tables ❘ 261 return _logoUrl; } public function set logoUrl(value:String):void { _logoUrl = value; } public function get name():String { return _name; } public function set name(value:String):void { _name = value; } } } listinG 12-2: Feedentry.as package com.maark.feed { /** * FeedEntry is a model class for an RSS feed entry * * @author Rich Wagner * */ public class FeedEntry { public var guid:String; public var url:String; public var feedId:int; public var title:String; public var text:String; public var timestamp:Date; public var thumbnailUrl:String; public var author:String; public var authorUrl:String; public var category:String; public var wasRead:Boolean = false; /** * Constructs a feed item from a generic * object with fields corresponding to the * names of the various item properties. public function FeedEntry(itemInfo:Object) { if (itemInfo) continues 262 ❘ chaPter 12 local databases listinG 12-2 (continued) { guid = itemInfo.guid; url = itemInfo.url; title = itemInfo.title; text = itemInfo.text; timestamp = itemInfo.timestamp; thumbnailUrl = itemInfo.thumbnailUrl; author = itemInfo.author; authorUrl = itemInfo.authorUrl; category = itemInfo.category; wasRead = itemInfo.wasRead; } } } } MakinG a sQl Query When you run a SELECT query on your database, you execute a SQLStatement in a process similar to the one you used when you created a table in the first place. However, what’s different about a query is that you need to process the resulting records that are returned to your program from the database.Suppose, for example, that you want to retrieve all the entries for a given feed. You could do that with a SELECT statement like this: SELECT * FROM feedEntries WHERE feedId = 100 However, to make the call more generic, you would want to use a parameter to represent the feedId: SELECT * FROM feedEntries WHERE feedId = :feedId You can then assign a value to the feedId in your AS3 code and use that for your SELECT query.To use that SELECT query in your app, you can use the following code: public function fetch(feed:Feed):void { const SELECT_ENTRIES_BY_FEED_ID:String = “SELECT * FROM feedEntries WHERE feedId = :feedId”; var sqlStatement:SQLStatement = new SQLStatement(); sqlStatement.sqlConnection = _connection; sqlStatement.text = SELECT_ENTRIES_BY_FEED_ID; sqlStatement.parameters[“:feedId”] = feed.uid; sqlStatement.execute(); // For each record in result set, add as a feedEntry instance var sqlResult:SQLResult = sqlStatement.getResult(); var entries:Array = sqlResult.data; var entry:FeedEntry; inserting and Updating records ❘ 263 if (entries) { for (var i:int=0; i<entries.length; i++) { entry = new FeedEntry(entries[i]); entry.feedId = feed.uid; feed.entries.push(entry); } } } In this code, the SQLStatement instance is assigned the SELECT query defined in the SELECT_ ENTRIES_BY_FEED_ID constant. As you can see, the :feedId is defined as a parameter in the SQL command. As a result, you need to assign a value to it before the query is executed. To do so, assign the value through the SQLStatement instance’s parameter property.After the query is executed, the results are assigned to a SQLResult instance. You can then assign its data property to an Array instance called entries. Finally, iterate through the entries array and create new FeedEntry instances and assign them to the Feed object’s entries property. When you want to insert new records in a database, execute an INSERT INTO statement. For example: INSERT INTO feeds (uid, url, name, logoUrl, lastFetched) VALUES (100, ‘www.me.com/rss.xml’,’My Feed’, ‘www.me.com/logo.png’, ‘03/31/2011’ ) Or, if the record may or may not already exist (based on its primary key), use REPLACE INTO. When you use it in a SQL statement, the database attempts to insert a record using the values provided."
4,Explain why it is able to read and write from the local file system,"As a result, web apps limit all local file access, can only perform web-based actions inside the context of a browser, and restrict data access to a single domain.The hybrid nature of an AIR for Android application puts it somewhere between the traditional desktop and restrictive web security models. On the one hand, you can create an Android application 10 ❘ chaPter 1 IntroducIng Flash development For mobIle devIces that runs on top of the normal Android OS security layer. Hence,it is able to read and write from the local file system.","Web apps, however, are far more restrictive because of the potentially malicious nature of scripting.As a result, web apps limit all local file access, can only perform web-based actions inside the context of a browser, and restrict data access to a single domain.The hybrid nature of an AIR for Android application puts it somewhere between the traditional desktop and restrictive web security models. On the one hand, you can create an Android application 10 ❘ chaPter 1 IntroducIng Flash development For mobIle devIces that runs on top of the normal Android OS security layer. Therefore, it is able to read and write from the local file system. However, because AIR utilizes web technologies that, if unchecked, could be hijacked by a malicious third party and used in harmful ways when accessing the local system, AIR has a security model to guard against that happening. Specifically, AIR for Android grants permissions to each source or data file in an AIR application based on their origin and places them into one of two kinds of sandboxes.The application sandbox contains all content that is installed with the app inside of the home directory of an application. Only these resources have access to the AIR for Android API and its runtime environment."
5,Explain why no reorientation is made when a user shifts the Android device to landscape mode,"VanillaApp is designed as a portrait app, so leave the default portrait as is. ➤ Full Screen — Indicates whether to launch the app in full screen or whether to show the Android status bar at the top of the screen. I left this unchecked. ➤ Auto Orientation — Specifies whether your app automatically reorients the aspect ratio when the user shifts the Android device into landscape or portrait mode.If VanillaApp were more sophisticated, I’d implement orientation. However, at this point, I will simply leave it unchecked. Hence,no reorientation is made when a user shifts the Android device to landscape mode.","The format should adhere to the xx[.xx[.xx]] format, where x is a digit 0–9. Subversions inside the brackets are optional. ➤ Version label — Optionally add a label to your version, such as Alpha or Beta. ➤ Aspect Ratio — Indicates the aspect ratio (portrait or landscape) of the app on startup.VanillaApp is designed as a portrait app, so leave the default portrait as is. ➤ Full Screen — Indicates whether to launch the app in full screen or whether to show the Android status bar at the top of the screen. I left this unchecked. ➤ Auto Orientation — Specifies whether your app automatically reorients the aspect ratio when the user shifts the Android device into landscape or portrait mode.If VanillaApp were more sophisticated, I’d implement orientation. However, at this point, I will simply leave it unchecked. Therefore, no reorientation is made when a user shifts the Android device to landscape mode. ➤ Included Files — Use this location to add any additional resource files that your app needs to include inside the .apk file. Your project’s .swf and application descriptor file ( myapp-app .xml) are automatically added to the Included Files list. You don’t need to include the mini.jpg image because it is embedded into the application at compile time. When you click the Deployment tab (see Figure 3-5), you see the following settings displayed: ➤ ➤ Certificate — Enter the location of the .p12 certificate file that you created in Chapter 2. ➤ Password — Supply the password for the .p12 file here. I recommend clicking the Remember Password for This Session check box to save you from re-entering the password multiple times during a debugging session. There are several configuration settings to make across the three tabs of the dialog box.You can also make these settings manually by editing the application descriptor XML file (named VanillaApp-app.xml for the sample app). See Appendix A for more details on the application descriptor file. Edit the settings in the General tab (see Figure 3-4) as described here: ➤ ➤ Output File — Gives you the option to specify the location of the compiled .apk file. If you don’t specify, the .apk is created in the root project directory. My personal preference is to place it in a build subdirectory. ➤ App Name — Enter the name of your app; Flash supplies a suggested name in the box already. This is the name that Android displays. ➤ App ID — Provide the App ID that you want to use to uniquely identify your application. ➤ Version — Enter the version number of your app. Flash automatically supplies 1.0 for you."
6,Explain why exactly how useful the mobile AIR Debug Launcher is depends on the nature of your app,"However, don’t confuse this preview capability with an Android simulator. Unless your development machine supports multitouch input, you can’t simulate Android-specific events or capabilities. Hence,exactly how useful the mobile AIR Debug Launcher is depends on the nature of your app.","The Icons tab (see Figure 3-6) allows you to specify which icons to use in your app. Select the appropriate size icon at the top, and then provide the location of the corresponding .png file in the middle text box. Permissions The final tab (see Figure 3-7) is used to specify certain permissions that you need your app to request to make for accessing certain parts of the Android device, such as the Camera or Geolocator. The user will then need to grant your app permission during the installation process. fiGure 3-7 For this app, you don’t need to ask for special permission, so you can leave them all unchecked. Before publishing and installing your app on your Android, you can preview it inside Flash CS5 by using the familiar Control➤➪➤Test Movie or Debug➤➪➤Debug Movie commands. Flash enables you to test or debug the app in the AIR Debug Launcher (Mobile) window.However, don’t confuse this preview capability with an Android simulator. Unless your development machine supports multitouch input, you can’t simulate Android-specific events or capabilities.Therefore, exactly how useful the mobile AIR Debug Launcher is depends on the nature of your app. In the case of VanillaApp (see Figure 3-8), the preview provides a good way to check for obvious errors, but it does not allow you to test the zoom and pan multitouch event handling. You have to wait and test that on the Android device or in the Android emulator (discussed in Chapter 13). Publishing and installing the application You are now ready to publish and compile the Flash project into an .apk file that you can use on the Android. (If you’d like to know more about the compilation process, check out Chapter 1.) To do so, choose File➤➪➤Publish from the menu (or click the Publish button if you are inside the Android Settings dialog box) The compilation process takes a few moments to complete. When you’re done, an .apk file is created in the outgoing location that you specified in the Android Settings dialog box. If you checked the Install and Launch on Device options, your app launches on your Android device. You’re now ready to test the app on the device itself. The app is shown in Figure 3-9. fiGure 3-9 54 ❘ chaPter 3 buIldIng and InstallIng vanIllaapp You can perform zoom and pan operations using your fingers, as shown in Figures 3-10 and 3-11. fiGure 3-11 You can also exit out of the app itself and go to the main screen to view the app icon in the application listings (see Figure 3-12). In this section, I’ll walk you through the process of building a basic HelloWorld-style application for iOS. It’s quite similar to the Android version, but is customized for the iPhone. 1 . Create a project. 3 . Create an ActionScript document class. 56 ❘ chaPter 3 buIldIng and InstallIng vanIllaapp creating a Project Begin by creating a new Flash project. Working within a project is not essential, particularly with a small app such as this one. However, I recommend it as standard practice because it enables you to more easily manage your files.1 . From the Welcome screen, click the Flash Project under the Create New list. (Or, choose File➤➪➤New from the menu and select Flash Project from the list.) The Project panel is displayed."
7,Explain why no reorientation is made when a user shifts the iPhone device to landscape mode,"VanillaApp is designed as a portrait app, so leave the default portrait as is. ➤ Full Screen — Indicates whether to launch the app in full screen or whether to show the iPhone status bar at the top of the screen. I left this unchecked. ➤ Auto Orientation — Specifies whether to have your app automatically reorient the aspect ratio when the user shifts the iPhone device into landscape or portrait mode.If VanillaApp were more sophisticated, I’d implement orientation. However, at this point, I will simply leave it unchecked. Hence,no reorientation is made when a user shifts the iPhone device to landscape mode.","These settings can also be made manually by editing the application descriptor xml file (named VanillaApp-app.xml for the sample app). See Appendix B for more details on the application descriptor file. Edit the settings in the General tab (see Figure 3-18) as shown here: ➤ ➤ Output File — Allows you to optionally specify the location of the compiled .ipa file. If you don’t specify otherwise, the .ipa is created in the root project directory. My personal preference is to place it in a build subdirectory. ➤ App Name — Enter the name of your app, although Flash supplies the suggested name in the box already. This is the name displayed by iPhone and iTunes. ➤ Version — Enter the version number of your app. Flash automatically supplies 1.0 for you. The format should adhere to the xx[.xx[.xx]] format where x is a digit 0-9. Subversions inside of the brackets are optional. Aspect Ratio — Indicates the aspect ratio (portrait or landscape) of the app on startup.VanillaApp is designed as a portrait app, so leave the default portrait as is. ➤ Full Screen — Indicates whether to launch the app in full screen or whether to show the iPhone status bar at the top of the screen. I left this unchecked. ➤ Auto Orientation — Specifies whether to have your app automatically reorient the aspect ratio when the user shifts the iPhone device into landscape or portrait mode.If VanillaApp were more sophisticated, I’d implement orientation. However, at this point, I will simply leave it unchecked. Therefore, no reorientation is made when a user shifts the iPhone device to landscape mode. ➤ Rendering — Select the way in which display objects are rendered: ➤➤ If you choose CPU, the CPU is used for this task, and no hardware acceleration is utilized. If you choose GPU, the iPhone uses the GPU for rendering bitmaps. If you choose Auto, Flash examines your app and uses the best rendering mode for your app.Given the nature of this app, I am selecting GPU. (Try compiling the app with both and you’ll definitely notice the difference that hardware acceleration can make with bitmap rendering.) See Chapter 5 for more information on CPU vs. GPU rendering. ➤ Included Files — Use this location to add any resource files that your app needs to include inside of the .ipa file. Your project’s .swf and application descriptor file (myapp-app.xml) are automatically added to the Included Files list. If you have a Default.png file to be used as the opening splash screen, be sure to add the file here. If you don’t, the initial image is ignored. When you click the Deployment tab (shown in Figure 3-19), the following settings are displayed: ➤➤ iPhone Digital Certificate — Enter the loca- tion of the .p12 file that you created back in Chapter 2. Password — Supply the password for the .p12 file here. I recommend clicking the Remember password for this session check box to save you from re-entering the pass- word multiple times during a debugging session. Provisioning Profile — Enter the location of the .mobileprovision file that you down- loaded from the iPhone Dev Center back in Chapter 2. App ID — Provide the App ID that you wish to use to uniquely identify your application. Chapter 2, then add the Bundle Seed ID (the alphanumeric string before the .*) followed fiGure 3-19 by your app name. For example, my App ID for VanillaApp is 5XS34A1JDN.VanillaApp."
8,Explain why exactly how useful the mobile AIR Debug Launcher is depends on the nature of your app,"Select the appropriate size icon at the top and then provide the location of the corresponding .png file in the middle text box. Click OK to save your changes. fiGure 3-21 Previewing the app inside flash Before publishing and installing your app on your iPhone, you can preview it inside of Flash CS5 by using the familiar Control➤➪➤Test Movie or Debug➤➪➤Debug Movie commands. Flash enables you to test or debug the app in the AIR Debug Launcher (Mobile) window.However, don’t confuse this preview capability with an iPhone simulator. You can’t simulate iPhone-specific events or capabilities. Hence,exactly how useful the mobile AIR Debug Launcher is depends on the nature of your app.","If your provisioning file is tied to a specific App ID, Flash automatically adds this ID into this box and won’t allow you to modify it. iPhone Deployment Type — Used to indicate the type of deployment you wish to make: ➤➤ Use Quick Publishing for Device Testing for quick and easy testing purposes. Select this option for VanilaApp at this time. Use Quick Publishing for Device Debugging to debug your app. When this option is selected, Flash debugger can receive trace() commands from the app. Use Deployment - Ad Hoc to create an application for non-App Store deployment. Use Deployment - Apple App Store to prepare an .ipa for submittal to the App Store. The final Icons tab (shown in Figure 3-20) allows you to specify the icons to use in your app.Select the appropriate size icon at the top and then provide the location of the corresponding .png file in the middle text box. Click OK to save your changes. fiGure 3-21 Previewing the app inside flash Before publishing and installing your app on your iPhone, you can preview it inside of Flash CS5 by using the familiar Control➤➪➤Test Movie or Debug➤➪➤Debug Movie commands. Flash enables you to test or debug the app in the AIR Debug Launcher (Mobile) window.However, don’t confuse this preview capability with an iPhone simulator. You can’t simulate iPhone-specific events or capabilities. Therefore, exactly how useful the mobile AIR Debug Launcher is depends on the nature of your app. In the case of VanillaApp (see Figure 3-21), the preview provides a good way to check for obvious errors, but it does not allow you to test zoom and pan multitouch event handling. You have to wait and test that on the iPhone itself. You are now ready to publish and compile the Flash project into an .ipa file ready for use on the iPhone. (If you’d like to know more about the compilation process, check out Chapter 1.) To do so, choose File➤➪➤Publish from the menu (or click the Publish button if you are inside of the iPhone Settings dialog box).The compilation process will take several minutes to complete. When done, an .ipa file is created in the outgoing location that you specified in the iPhone Settings dialog box. installing the app on an iPhone Your final step is to take the .ipa file and install it onto the iPhone. To do so, perform the following steps: 1 . Drag and drop the .ipa file onto your iTunes window."
9,"Explain why if the user performs a right swipe, the intended action is to move to the next frame in the Timeline using gotoAndStop(currentFrame+1)","My idea for the app is to move between frames each time the user performs a swipe action on the screen. To handle that, the GESTURE_SWIPE event handler is shown here: private function swipeHandler(event:TransformGestureEvent):void { // Swipe Left if (event.offsetX == 1 ) { if (currentFrame > 1) Working with the swipe gesture ❘ 99 { gotoAndStop(currentFrame-1); } else { gotoAndStop(totalFrames); } } //Swipe Right else if (event.offsetX == -1) { if (currentFrame < totalFrames) { gotoAndStop(currentFrame+1); } else { gotoAndStop(1); } } swipe.play(); } Code snippet PhotoPage.as Use the offsetX property of the TransformGestureEvent object to determine the direction of the swipe. A value of 1 indicates that the swipe is leftward, whereas a value of –1 indicates a swipe to the right. Hence,if the user performs a right swipe, the intended action is to move to the next frame in the Timeline using gotoAndStop(currentFrame+1).","The sound is added as an asset to your library (Window➤➪➤Library). However, before you can use it inside your AS3 code, you need to export it for use in ActionScript. fiGure 5-3 3 . Right-click the sound asset in the Library and choose Properties. (see Figure 5-4), name the sound asset swipesound. check box. With the Timeline set up and the sound asset added to your Flash document, you are ready to create and code the AS3 document class. In the Properties panel, enter PhotoPage as the document class, and click the pencil button to edit the class definition in your preferred editor. 98 ❘ chaPter 5 multItouch apI Inside the package, begin by adding the import statements that you’ll need: import flash.display.MovieClip; import flash.events.TransformGestureEvent; import flash.events.Event; import flash.ui.Multitouch; import flash.ui.MultitouchInputMode; import flash.media.Sound; Code snippet PhotoPage.as Next, add one private property inside the PhotoPage class for the sound asset: private var swipe:SwipeSound; Code snippet PhotoPage.as The SwipeSound class is the class that Flash generated when you exported the asset to ActionScript. public function PhotoPage() { // Need to stop playing of movie since // we have multiple frames for this app stop(); // Create sound instance swipe = new SwipeSound(); // If support multitouch if (Multitouch.supportsTouchEvents) { Multitouch.inputMode = MultitouchInputMode.GESTURE; stage.addEventListener(TransformGestureEvent.GESTURE_SWIPE, swipeHandler); } } Code snippet PhotoPage.as As you can see, you’ll want to perform three actions in the constructor. First, stop the Flash movie from playing by calling stop(). This causes the movie to stop playing at Frame 1. Second, create an instance of the SwipeSound that you’ll use later. Third, if touch events are supported, assign the Multitouch.inputMode to respond to gestures. Then add a listener for the GESTURE_SWIPE event.My idea for the app is to move between frames each time the user performs a swipe action on the screen. To handle that, the GESTURE_SWIPE event handler is shown here: private function swipeHandler(event:TransformGestureEvent):void { // Swipe Left if (event.offsetX == 1 ) { if (currentFrame > 1) Working with the swipe gesture ❘ 99 { gotoAndStop(currentFrame-1); } else { gotoAndStop(totalFrames); } } //Swipe Right else if (event.offsetX == -1) { if (currentFrame < totalFrames) { gotoAndStop(currentFrame+1); } else { gotoAndStop(1); } } swipe.play(); } Code snippet PhotoPage.as Use the offsetX property of the TransformGestureEvent object to determine the direction of the swipe. A value of 1 indicates that the swipe is leftward, whereas a value of –1 indicates a swipe to the right.Therefore, if the user performs a right swipe, the intended action is to move to the next frame in the Timeline using gotoAndStop(currentFrame+1). However, once the user gets to the last frame, the app should take the user to the first frame.When the user swipes left, the app should take the user to the previous frame. If the user performs a leftward swipe on the first frame, it wraps around and takes the user to the final frame of the Timeline."
10,"Explain why when a shake event occurs, the shakeHandler() function is called","Next, defi ne one more variable, which is simply a counter to the number of shakes detected: private var shakes:int = 0; Code snippet Shakey.as detecting shaking ❘ 123 The constructor begins with straightforward code to set up the stage and TextField and then attach a handler for the Accelerometer update event: public function Shakey() { stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; // Create text field tfInfo = new TextField(); var format:TextFormat = new TextFormat(“Helvetica”, 26); format.color = 0x000000; tfInfo.defaultTextFormat = format; tfInfo.border = false; tfInfo.wordWrap = true; tfInfo.multiline = true; tfInfo.x = 10; tfInfo.y = 10; tfInfo.height = stage.stageHeight - 80; tfInfo.width = stage.stageWidth - 20; addChild(tfInfo); // Determine accelerator support if (Accelerometer.isSupported) { accelerometer = new Accelerometer(); accelerometer.addEventListener(AccelerometerEvent.UPDATE, accelerometerUpdateHandler); } else { tfInfo.text = “Motion sensor detection is not support on this ” + “device. No shaking for you!”; } } Code snippet Shakey.as One of the key purposes of this app is to detect when a shake occurs. To that end, you want to define a custom shake event that you will write your application to dispatch when your app experiences a shake. To define the custom event, add the [Event] metatag above the Shakey class definition: [Event(“shake”, “flash.events.Event”)] public class Shakey extends Sprite { … } Code snippet Shakey.as Before you leave the constructor code you started earlier, add the following line: addEventListener(“shake”, shakeHandler); 124 ❘ chaPter 6 detectIng motIon wIth accelerometer Hence,when a shake event occurs, the shakeHandler() function is called.","I’ll show you how I did it in an app I call Shakey, which simply displays the number of shakes that the app detected since the app began. To create this project, begin by setting up the Flash project in a typical fashion: 1 . Within the desired directory, create a new Flash docu- ment using the AIR for Android template and name it Shakey.fl a. 2 . In the Properties panel, enter Shakey as the document class and click the pencil button to edit the class defi ni- fiGure 6-6 tion in your preferred editor. As you begin to fi ll out the Shakey class defi nition, you will have several properties to defi ne. Start with the standard objects that you’ll need: an Accelerometer instance and a TextField component that will be the sole UI for the app. private var tfInfo:TextField; Code snippet Shakey.as Then you defi ne several variables that will be used to analyze the motion of the device: private var deltaX:Number; private var deltaY:Number; private var deltaZ:Number; private var accX:Number; private var accY:Number; private var accZ:Number; Code snippet Shakey.as I’ll discuss how those are used later in the example.Next, defi ne one more variable, which is simply a counter to the number of shakes detected: private var shakes:int = 0; Code snippet Shakey.as detecting shaking ❘ 123 The constructor begins with straightforward code to set up the stage and TextField and then attach a handler for the Accelerometer update event: public function Shakey() { stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; // Create text field tfInfo = new TextField(); var format:TextFormat = new TextFormat(“Helvetica”, 26); format.color = 0x000000; tfInfo.defaultTextFormat = format; tfInfo.border = false; tfInfo.wordWrap = true; tfInfo.multiline = true; tfInfo.x = 10; tfInfo.y = 10; tfInfo.height = stage.stageHeight - 80; tfInfo.width = stage.stageWidth - 20; addChild(tfInfo); // Determine accelerator support if (Accelerometer.isSupported) { accelerometer = new Accelerometer(); accelerometer.addEventListener(AccelerometerEvent.UPDATE, accelerometerUpdateHandler); } else { tfInfo.text = “Motion sensor detection is not support on this ” + “device. No shaking for you!”; } } Code snippet Shakey.as One of the key purposes of this app is to detect when a shake occurs. To that end, you want to define a custom shake event that you will write your application to dispatch when your app experiences a shake. To define the custom event, add the [Event] metatag above the Shakey class definition: [Event(“shake”, “flash.events.Event”)] public class Shakey extends Sprite { … } Code snippet Shakey.as Before you leave the constructor code you started earlier, add the following line: addEventListener(“shake”, shakeHandler); 124 ❘ chaPter 6 detectIng motIon wIth accelerometer Therefore, when a shake event occurs, the shakeHandler() function is called.The accelerometerUpdateHandler() contains the key logic that the app uses to determine whether a shake occurs. Here’s the code: private function accelerometerUpdateHandler(event:AccelerometerEvent):void { // Constant used to determine whether a movement is strong enough // to constitute a “shake” var threshold:Number = 0.7; // Determine delta for each dimension deltaX = Math.abs(accX - event.accelerationX); deltaY = Math.abs(accY - event.accelerationY); deltaZ = Math.abs(accZ - event.accelerationZ); // Algorithm to determine whether a shake occurred. (deltaX > threshold && deltaZ > threshold) || (deltaY > threshold && deltaZ > threshold)) { dispatchEvent(new Event(“shake”)); } // Save acceleration data from this read accX = event.accelerationX; accY = event.accelerationY; accZ = event.accelerationZ; } Code snippet Shakey.as The threshold is a number that determines whether a movement is strong enough to be called a shake. You may want to experiment with this number slightly. I settled at 0.7. Next, delta values are obtained for the x, y, and z axes based on the difference between the previous Accelerometer data and the current data set. These delta values are then compared to the threshold variable. If two of the three axes register values greater than 0.7, a shake event is dispatched."
11,"Explain why application developers must face two key design questions: ➤➤ Will my app support auto orientation? Or will it stay fi xed at portrait or landscape? ➤➤ If my app supports auto orientation, how should the UI change? This chapter walks you through how to implement auto orientation into your Flash apps by focusing on how to respond to StageOrientationEvent events","When you’re developing for Android and iOS, it’s a different world, because there is a new issue to contend with — screen orientation (or rotation).Android and iOS users can change the orientation of their screens by physically turning the device with their hands. If an application changes its UI based on this change, it supports auto orientation. Hence,application developers must face two key design questions: ➤➤ Will my app support auto orientation? Or will it stay fi xed at portrait or landscape? ➤➤ If my app supports auto orientation, how should the UI change? This chapter walks you through how to implement auto orientation into your Flash apps by focusing on how to respond to StageOrientationEvent events.","The shakeHandler() method simply needs to increment the counter variable and display the information on-screen: private function shakeHandler(event:Event):void { shakes++; tfInfo.text = “Shakes detected: “ + shakes.toString(); } Code snippet Shakey.as Listing 6-4 shows the full source code for the document class. listinG 6-4: shakey.as package { import flash.display.Sprite; import flash.display.StageAlign; import flash.display.StageScaleMode; import flash.events.AccelerometerEvent; import flash.events.Event; import flash.events.EventDispatcher; import flash.sensors.Accelerometer; import flash.text.TextField; import flash.text.TextFormat; /** * Document class for Shakey application. * * @author Rich Wagner * */ [Event(“shake”, “flash.events.Event”)] public class Shakey extends Sprite { // Class properties private var accelerometer:Accelerometer; private var tfInfo:TextField; // Data used to determine a shake private var deltaX:Number; private var deltaY:Number; private var deltaZ:Number; private var accX:Number; private var accY:Number; private var accZ:Number; // Number of shakes captured private var shakes:int = 0; /** * Constructor * */ public function Shakey() { stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; // Create text field tfInfo = new TextField(); var format:TextFormat = new TextFormat(“Helvetica”, 26); format.color = 0x000000; tfInfo.defaultTextFormat = format; continues 126 ❘ chaPter 6 detectIng motIon wIth accelerometer listinG 6-4 (continued) tfInfo.border = false; tfInfo.wordWrap = true; tfInfo.multiline = true; tfInfo.x = 10; tfInfo.y = 10; tfInfo.height = stage.stageHeight - 80; tfInfo.width = stage.stageWidth - 20; addChild(tfInfo); // Determine accelerator support if (Accelerometer.isSupported) { accelerometer = new Accelerometer(); accelerometer.addEventListener(AccelerometerEvent.UPDATE, accelerometerUpdateHandler); } else { tfInfo.text = “Motion sensor detection is not supported on this “ + “device. No shaking for you!”; } // Add custom shake event addEventListener(“shake”, shakeHandler); } /** * Handler for Accelerator updates * * @param event * */ private function accelerometerUpdateHandler(event:AccelerometerEvent):void { // Constant used to determine whether a movement is strong enough // to constitute a “shake” var threshold:Number = 0.72; // Determine delta for each dimension deltaX = Math.abs(accX - event.accelerationX); deltaY = Math.abs(accY - event.accelerationY); deltaZ = Math.abs(accZ - event.accelerationZ); // Algorithm to determine whether a shake occurred. (deltaX > threshold && deltaZ > threshold) || (deltaY > threshold && deltaZ > threshold)) { dispatchEvent(new Event(“shake”)); summary ❘ 127 } // Save acceleration data from this read accX = event.accelerationX; accY = event.accelerationY; accZ = event.accelerationZ; } /** * Handler for shake event * * @param event * */ private function shakeHandler(event:Event):void { shakes++; tfInfo.text = “Shakes detected: “ + shakes.toString(); } } } running the app Figure 6-7 shows the on-screen results of running the app and shaking it vigorously. If too many shakes are being dispatched, you can adjust the time in which the Accelerometer updates with setRequestedIntervalTime() of the Accelerometer class, or you can try adjusting the threshold value. In this chapter, you discovered how to use the accelerometer, one of the core hardware components of any mobile device. I began by showing you how to listen for accelerometer events and then walked you through how to respond to these events in the user interface. Finally, while AS3 doesn’t currently provide a shake event, I showed how you can combine your own logic with existing accelerometer events to detect shaking. 7implementing auto orientation What’s in this chaPter? ➤➤ Rotating your app automatically ➤➤ Working with StageOrientationEvent ➤➤ Detecting an orientation change If you are experienced in creating Flash or Flex applications for the Web or for Adobe Integrated Runtime (AIR) for Desktop, you are probably used to dealing with issues surround-ing stretched versus fi xed widths to account for different browser sizes or monitor resolutions.When you’re developing for Android and iOS, it’s a different world, because there is a new issue to contend with — screen orientation (or rotation).Android and iOS users can change the orientation of their screens by physically turning the device with their hands. If an application changes its UI based on this change, it supports auto orientation. Therefore, application developers must face two key design questions: ➤➤ Will my app support auto orientation? Or will it stay fi xed at portrait or landscape? ➤➤ If my app supports auto orientation, how should the UI change? This chapter walks you through how to implement auto orientation into your Flash apps by focusing on how to respond to StageOrientationEvent events. Before you can implement auto orientation, you need to enable this feature in your Flash project. You can do this through the AIR Android Settings dialog box or by modifying the application descriptor XML fi le.For Android apps, access the Android Settings dialog box (see Figure 7-1) by clicking the Android OS Settings Edit button in the Properties panel of your .fla document. Check the Auto Orientation check box and click OK. For iPhone apps, access the iPhone Settings dialog box (see Figure 7-2) by clicking the iPhone OS Settings Edit button in the Properties panel. Check the Auto Orientation check box and click OK."
12,Explain why you don’t have to specifically call the setRequestedUpdateInterval() method to get Geolocation to provide updates,"After you establish the fact that geolocation services are available, you can instantiate a Geolocation object and configure it for use. A typical scenario looks something like this: if (Geolocation.isSupported) { var geo:Geolocation = new Geolocation(); geo.setRequestedUpdateInterval(200); geo.addEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler); geo.addEventListener(StatusEvent.STATUS, geolocationStatusHandler); } else { Trace(“Geolocation not available.); } The setRequestedUpdateInterval() method sets up a requested time interval (in milliseconds) in which to receive location updates. However, note the usage of the word requested. The actual time may vary, because the OS and location sensor ultimately are responsible for determining the interval.Depending on the OS, the default interval will be around 100 ms when working with geolocation services. Hence,you don’t have to specifically call the setRequestedUpdateInterval() method to get Geolocation to provide updates.","AIR for Android and Packager for iPhone provide access to mobile location services through two classes: Geolocation and GeolocationEvent. This chapter shows you how to work with these two classes to make your apps location aware. It highlights four sample apps that utilize geolocation: ➤➤ Geolocate — A simple raw display of location data ➤➤ Poorman Compass — A simple compass app ➤➤ Speedometer — A simple speedometer app ➤➤ FindMeAPizza — An app that fi nds the nearest pizza shop GettinG Geolocation Data You can use a combination of the Geolocation and GeolocationEvent classes to retrieve geolocation data into your app. The Geolocation class is the controller that dispatches events triggered by the Android location sensor. Table 8-1 displays the properties, methods, and events of Geolocation. table 8-1: Geolocation Members tyPe naMe DescriPtion Property isSupported:Boolean (static) Indicates whether the device sup- ports geolocation services Property muted:Boolean Specifies whether the user has given permission to access geoloca- tion information in the app Methods setRequestedUpdateInterval(interval) Sets the time interval for updates (milliseconds) Event StatusEvent.Status Dispatched when the user changes the access permission to geolocation Event GeolocationEvent.Update Dispatched when the location sensor updates the app However, because your app may or may not be running on a mobile device that doesn’t have built-in GPS, you first need to check to see whether a geolocation sensor is available using the static Geolocation method isSupported(), which returns a Boolean value indicating support.After you establish the fact that geolocation services are available, you can instantiate a Geolocation object and configure it for use. A typical scenario looks something like this: if (Geolocation.isSupported) { var geo:Geolocation = new Geolocation(); geo.setRequestedUpdateInterval(200); geo.addEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler); geo.addEventListener(StatusEvent.STATUS, geolocationStatusHandler); } else { Trace(“Geolocation not available.); } The setRequestedUpdateInterval() method sets up a requested time interval (in milliseconds) in which to receive location updates. However, note the usage of the word requested. The actual time may vary, because the OS and location sensor ultimately are responsible for determining the interval.Depending on the OS, the default interval will be around 100 ms when working with geolocation services. Therefore, you don’t have to specifically call the setRequestedUpdateInterval() method to get Geolocation to provide updates.The setRequestedUpdateInterval() method can be helpful for conserving battery power, particularly if your app doesn’t need constant real-time updates. So, if you would like to request an update only every one second instead of every tenth of a second, you’d be making 90 percent fewer calls. Next, a handler for the GeolocationEvent.UPDATE event is assigned with addEventListener()."
13,"Explain why by composing a URL string, you can point to a specific place on a map or display driving directions between two places","If you choose Email, a message window is pre-populated with the parameters specified in the KindaSortaMail app (see Figure 9-14). fiGure 9-13 fiGure 9-14 Alternatively, when you install and run the app on my iPhone, you can enter the message information in the text inputs (see Figure 9-15). When you click Send, the app closes and iPhone’s Mail app is launched. A new message is pre-populated with the parameters specified in the KindaSortaMail app (see Figure 9-16). fiGure 9-15 fiGure 9-16 PointinG on GooGle MaPs Although the Maps app doesn’t have a special URL protocol, Android does optionally route any URL requests pointing to maps.google.com to the Maps application. Hence,by composing a URL string, you can point to a specific place on a map or display driving directions between two places.","When you click Send, a pop-up window appears asking you whether to complete the action using Compose or Email (see Figure 9-13).If you choose Email, a message window is pre-populated with the parameters specified in the KindaSortaMail app (see Figure 9-14). fiGure 9-13 fiGure 9-14 Alternatively, when you install and run the app on my iPhone, you can enter the message information in the text inputs (see Figure 9-15). When you click Send, the app closes and iPhone’s Mail app is launched. A new message is pre-populated with the parameters specified in the KindaSortaMail app (see Figure 9-16). fiGure 9-15 fiGure 9-16 PointinG on GooGle MaPs Although the Maps app doesn’t have a special URL protocol, Android does optionally route any URL requests pointing to maps.google.com to the Maps application. Therefore, by composing a URL string, you can point to a specific place on a map or display driving directions between two places.The map displayed may be shown in Map or Satellite view, depending on the last view the user selected."
14,Explain why no additional permission is required,"If the user cancels the process while accessing the camera or something goes awry, trap for these cases using the errorHandler() function: public function errorHandler(event:Event):void { lbl.text = event.type; } The SnapAPic document class is now good to go. Save it and return to the SnapAPic.fla file. <uses-permission android:name=”android.permission.CAMERA” /> permission statement in the app descriptor file if you want to directly access the camera, launching the CameraUI doesn’t require this same permission. Hence,no additional permission is required.","However, the core part of SnapAPic is to appropriately handle the user returning from the camera app to your app. When the user takes an image or video shot and returns successfully to SnapAPic, the MediaEvent.COMPLETE event is dispatched. The mediaCompleteHandler() function is set up to deal with this event: private function mediaCompleteHandler(event:MediaEvent):void { var file:File = event.data.file; lbl.text = file.url; } For this simple example, the handler pulls the File object associated with a MediaPromise object being returned as event.data. (A MediaPromise object, similar to a FilePromise, is a commitment that the media file exists without actually checking.) The file’s URL is then assigned to the label.If the user cancels the process while accessing the camera or something goes awry, trap for these cases using the errorHandler() function: public function errorHandler(event:Event):void { lbl.text = event.type; } The SnapAPic document class is now good to go. Save it and return to the SnapAPic.fla file. <uses-permission android:name=”android.permission.CAMERA” /> permission statement in the app descriptor file if you want to directly access the camera, launching the CameraUI doesn’t require this same permission. Therefore, no additional permission is required. Figure 10-1 shows the SnapAPic app when it is launched. Once you click the Image button, the Camera app is displayed (see Figure 10-2). The user can then take a picture and, once satisfied, click OK to return to the SnapAPic app. The name of the image file is shown in the user interface (UI). ebook.com ow.wwww ! eBook < ow W fiGure 10-1 fiGure 10-2 nload fromwDo fiGure 10-3 214 ❘ chaPter 10 androId camera, camera roll, and mIcrophone listinG 10-1: snapaPic.as package { import com.kevinhoyt.components.*; import flash.display.Sprite; import flash.display.StageScaleMode; import flash.display.StageAlign; import flash.events.MouseEvent; import flash.media.CameraUI; import flash.media.MediaType; import flash.display.SimpleButton; import flash.events.*; import flash.text.TextFormat; import flash.text.TextField; import flash.filesystem.File; /** * Document class for SnapAPic application. * * @author Rich Wagner * */ public class SnapAPic extends Sprite { private var btn:Button; private var ftr:Footer; private var lbl:Label; private var ttl:Title; private var txt:TextInput; private var cameraUI:CameraUI; /** * Constructor * */ public function SnapAPic() { super(); stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; ttl = new Title( “SnapAPic” ); addChild( ttl ); lbl = new Label( “Click a button to snap a picture/video” ); lbl.x = 9; lbl.y = 52; addChild( lbl ); ftr = new Footer( “Image”, “Video” ); CameraUi: launch and return ❘ 215 ftr.y = 683; addChild( ftr ); // Camera support? if (CameraUI.isSupported) { cameraUI = new CameraUI(); cameraUI.addEventListener(MediaEvent.COMPLETE, mediaCompleteHandler); cameraUI.addEventListener(ErrorEvent.ERROR, errorHandler); cameraUI.addEventListener(Event.CANCEL, errorHandler); ftr.addEventListener(FooterEvent.OK, imageButtonClickHandler); ftr.addEventListener(FooterEvent.CANCEL, videoButtonClickHandler); } else { lbl.text = “Unable to access Camera.”; } } /** * Launches the image camera * * @param event * */ private function imageButtonClickHandler(event:FooterEvent):void { cameraUI.launch(MediaType.IMAGE); } /** * Launches the video camera * * @param event * */ private function videoButtonClickHandler(event:FooterEvent):void { cameraUI.launch(MediaType.VIDEO); } /** * Displays media file name in the label * * @param event * */ private function mediaCompleteHandler(event:MediaEvent):void continues 216 ❘ chaPter 10 androId camera, camera roll, and mIcrophone listinG 10-1 (continued) { var file:File = event.data.file lbl.text = file.url; } /** * Displays error details * * @param event * */ public function errorHandler(event:Event):void { lbl.text = event.type; } } } caMera: creatinG a live viDeo feeD In addition to launching the Camera app, you can get tighter integration by actually bringing the camera into your own application and capturing video using the Camera object. You’ll learn how you can use Camera, in combination with the Video object, to create a live video feed in your app without embedding the video into your app.One important note about capturing video in your app: to use Camera inside your app, you need to use landscape orientation. Otherwise, your video feed is displayed at a –90 degree angle, no matter what you do. 1 . Create a new Flash project, name it LiveFeed, and assign it to your d:\android-dev\ LiveFeed directory."
15,Explain why follow these steps to add and customize the component set for the purposes of Jots: 1 ,"While the UI portion of this example is Android-specifi c, the File I/O portions of the Jots document class will function as is under iOS. adding Minimal Comps set This app also demonstrates how to use a set of open-source Flash-based UI components called Minimal Comps, which you can download from www.minimalcomps.com. Although these are not necessarily targeted for Android, they provide an alternate example of UI implementation beyond what you’ve seen elsewhere in this book.Although this section doesn’t fully “Androidize” the components, you do need to tweak the default font and size before you can use them on Android devices. Hence,follow these steps to add and customize the component set for the purposes of Jots: 1 .","Before diving into the ActionScript code, you need to set up the Flash project as follows: 1 . Within the target directory, create a new Flash document based on the AIR for Android template and name it Jots.fla.While the UI portion of this example is Android-specifi c, the File I/O portions of the Jots document class will function as is under iOS. adding Minimal Comps set This app also demonstrates how to use a set of open-source Flash-based UI components called Minimal Comps, which you can download from www.minimalcomps.com. Although these are not necessarily targeted for Android, they provide an alternate example of UI implementation beyond what you’ve seen elsewhere in this book.Although this section doesn’t fully “Androidize” the components, you do need to tweak the default font and size before you can use them on Android devices. Therefore, follow these steps to add and customize the component set for the purposes of Jots: 1 . Download the Minimal Comps lightweight third-party components from www.minimalcomps.com.3 . Copy the assets and com subdirectories (under src), and paste them into your Jots project directory."
16,"Explain why although the Minimal Comps components are not optimized for Android, now they are at least usable on Android devices for your sample app purposes — and they make life a little easier","6 . Comment out the Flex 4 Embed reference to the PF Ronda Seven font, and add the following just below it: // Standard Minimal Comps font //[Embed(source=”/assets/pf_ronda_seven.ttf”, embedAsCFF=”false”, fontName=”PF Ronda Seven”, mimeType=”application/x-font”)] // Replacing with Droid Sans for Android deployment [Embed(source=”/assets/DroidSans.ttf”, embedAsCFF=”false”, fontName=”Droid Sans”, mimeType=”application/x-font”)] 7 . Save and close the Component.as file. public static var fontName:String = “Droid Sans”; public static var fontSize:Number = 22; 10 . Save and close the Style.as file. Hence,although the Minimal Comps components are not optimized for Android, now they are at least usable on Android devices for your sample app purposes — and they make life a little easier.","5 . Open the Component.as file in the com.bit101.components package in your editor of choice.6 . Comment out the Flex 4 Embed reference to the PF Ronda Seven font, and add the following just below it: // Standard Minimal Comps font //[Embed(source=”/assets/pf_ronda_seven.ttf”, embedAsCFF=”false”, fontName=”PF Ronda Seven”, mimeType=”application/x-font”)] // Replacing with Droid Sans for Android deployment [Embed(source=”/assets/DroidSans.ttf”, embedAsCFF=”false”, fontName=”Droid Sans”, mimeType=”application/x-font”)] 7 . Save and close the Component.as file. public static var fontName:String = “Droid Sans”; public static var fontSize:Number = 22; 10 . Save and close the Style.as file.Therefore, although the Minimal Comps components are not optimized for Android, now they are at least usable on Android devices for your sample app purposes — and they make life a little easier.You can return to the .fla document and then, in the Properties panel, click the pencil button to edit the Jots class definition in your preferred editor. coding the Document class As you begin to edit the Jots document class, the first thing you might want to do is add several import statements for both the Minimal Comps components you intend to use as well as the file-related classes you want to use for reading and writing. Here’s the list needed for this example: // Base import flash.display.MovieClip; // Events import flash.events.MouseEvent; import flash.events.IOErrorEvent; import flash.events.Event; // Minimal Comps components import com.bit101.components.PushButton; import com.bit101.components.TextArea; // File-related import flash.filesystem.File; import flash.filesystem.FileMode; import flash.filesystem.FileStream; // Stage setup import flash.display.StageAlign; import flash.display.StageScaleMode; Code snippet Jots.as Inside the Jots class, begin by declaring four private properties for UI and file-related purposes: private var ta:TextArea; private var openBtn:PushButton; private var saveBtn:PushButton; public var file:File; Code snippet Jots.as Filling the Constructor Function Next, inside the constructor function, create your user interface. Then create a pointer to the text file you will be reading and writing from. Here’s the code: public function Jots() { // Set up the stage stage.scaleMode = StageScaleMode.NO_SCALE; stage.align = StageAlign.TOP_LEFT; // Create TextField ta = new TextArea(); ta.x = 10; ta.y = 10; ta.height = stage.stageHeight - 120; ta.width = stage.stageWidth - 20; reading and Writing Files ❘ 249 addChild(ta); // Create Open button openBtn = new PushButton(); openBtn.label = “Open”; openBtn.x = 10; openBtn.y = stage.stageHeight - 100; openBtn.height = 70; openBtn.width = 200; openBtn.addEventListener(MouseEvent.CLICK, openBtnClickHandler); addChild(openBtn); // Create Save button > saveBtn = new PushButton(); saveBtn.label = “Save”; saveBtn.x = 240; saveBtn.y = stage.stageHeight - 100; ebook.com saveBtn.height = 70; ow saveBtn.width = 200; .ww saveBtn.addEventListener(MouseEvent.CLICK, saveBtnClickHandler); w addChild(saveBtn); w // Create pointer to file file = File.applicationStorageDirectory.resolvePath(“MyDataFile.txt”); ! eBook < } ow Code snippet Jots.as W In this code, you can begin by setting up the stage, followed by creating a TextArea (Minimal Comps version, not built-in version) instance. Assign it to take up all but 120 pixels of the height nload fromw and all but 20 pixels of the width of the viewport. Continue by creating two PushButton instances: one for opening the file and one for saving it."
17,"Explain why in order enable remote debug, you need to do the following: 1 ","To run, open your .fla file in the Flash IDE and then choose Debug➤➪➤Debug Movie➤➪➤In AIR Debug Mobile Launcher (Mobile). The app is launched in a separate window. (See Figure 13-1.) anDroiD DebuGGinG When you debug your Android apps on your Android device, you first need to make sure your phone is enabled for debugging. Hence,in order enable remote debug, you need to do the following: 1 .","You’ll also need to know the IP address (or hostname) of your development computer. You can fi nd it in Windows by running ipconfi g in a Windows command line window. Or, if you’re running a Mac, go to System Preferences➤➪➤Network. The Network Settings page displays your IP address. usinG the air DebuG launcher If you’re using Flash Professional, you can perform a quick debug on your development machine right inside of the IDE. While it won’t be the same as testing on the device itself, the AIR Debug Launcher is a handy first pass debugging tool. Then, once you’ve got the kinks worked out, you can move on to remote debugging on the device itself.To run, open your .fla file in the Flash IDE and then choose Debug➤➪➤Debug Movie➤➪➤In AIR Debug Mobile Launcher (Mobile). The app is launched in a separate window. (See Figure 13-1.) anDroiD DebuGGinG When you debug your Android apps on your Android device, you first need to make sure your phone is enabled for debugging. Therefore, in order enable remote debug, you need to do the following: 1 . On your Android device, enable debugging by going to Settings➤➪➤Applications➤➪➤Development and enabling USB debugging. (See Figure 13-2.) 2 . If it is not already enabled, make sure that USB Storage is enabled for your device. fiGure 13-2 remote Debugging inside the flash iDe The easiest way of debugging your Android app is to remote debug directly from inside of the Flash IDE. To do so: 1 . Click the AIR Android Settings dialog box on the Properties panel. android debugging ❘ 275 3 . Select Debug for the Android deployment type.7 . Select the INTERNET Permissions check box to enable the android:permission.INTERNET permission in your app descriptor file."
